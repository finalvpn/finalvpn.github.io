{"version":3,"sources":["AppContext.js","components/service/Util.js","components/service/Site.js","components/service/Cart.js","components/Toast.js","components/BottomBar.js","components/CartDialog.js","components/DeliveryDialog.js","components/RegisterCustomer.js","components/LoginDialog.js","components/ProfileDialog.js","components/MyAppBar.js","components/PaymentDialog.js","components/FoodOptionsDialog.js","components/OfferOptionsDialog.js","components/LeftDrawer.js","components/OrderHistoryDialog.js","components/MessageBox.js","components/ForgotPassDialog.js","components/WaitingProgress.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Util","isMobile","test","navigator","userAgent","substr","toLowerCase","indexOf","window","Capacitor","platform","v","map","Math","floor","console","log","str","i","hash","length","charCodeAt","num","size","s","email","price","toFixed","array","key","sort","a","b","x","y","val","obj","Error","captureStackTrace","this","getStackTrace","stack","date","format","utc","MMMM","MMM","dddd","ddd","ii","len","getUTCFullYear","getFullYear","replace","toString","M","getUTCMonth","getMonth","d","getUTCDate","getDate","H","getUTCHours","getHours","h","m","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","f","getUTCMilliseconds","getMilliseconds","round","T","charAt","t","tz","getTimezoneOffset","K","tzMin","abs","day","getUTCDay","getDay","RegExp","object","instance","Site","sitekey","site","state","registration_pp_plan_id","registration_pp_client_id","auth","siteSubject","Subject","authSubject","fatalErrorSubject","toastSubject","messageBoxSubject","waitingSubject","baseApiUrl","resp1","String","prototype","contains","startIndex","call","variable","query","location","search","substring","vars","split","pair","url","data","formData","URLSearchParams","_t","Date","now","_str","JSON","stringify","_h","crypto","createHash","update","digest","append","fetch","method","headers","body","then","resp","text","parse","onerror","message","file","line","col","error","sendEventLog","event","e","err","errresp","formatDate","setTimeout","showToast","orderParams","resultCallback","callApi","res","href","catch","catchErrorInApi","msg","type","position","showWaiting","next","title","show","_navigator","_nav","script","document","createElement","src","async","stacktrace","appendChild","Cart","cart","deliveryMethod","paymentMethod","totalCartValue","subtotal","totalCartFoodCount","deliveryCharge","discount","deliveryAddress","person","address1","address2","postcode","city","phone","addressnote","simpleProps","cartSubject","showDialogSubject","dst","copyProps","localStorage","setItem","getItem","removeItem","food","prices","food2","total","addToCartObject","topping","toppingprice","tcategoryids","foodinfo","foodtcategory","filter","cat","foodid","tcategoryid","push","selectedSize","sizeid","id","p","includes","toppingid","reverse","count","updateTotal","splice","model","freeToppingCount","find","modelid","showMessageBox","toppings","forEach","checked","abbrsm","abbr","abbrsp","abbrs","concat","toppingsabbr","join","lesstoppings","extratoppings","baseselected","selected","basetpsList","tpsList","findToppingPrice","tp","tc","freeCount","tpsListP","slice","basetps","reduce","tps","tpsDiff","undefined","f1","details","detail","selectedFood","offer","extra","extraOfferPrice","foodToAdd","totalWithOptionPrice","computeFoodHash","foodexisted","c","newcart","deliveryChargeRules","isNaN","lastDigit","postcode1","deliveryChargeRules2","charge","d3","address","totalOffers","item","getDeliveryCharge","online_discount","max","deliveryChargeCalc","delivery_charge","minorder","formatPrice","shopStatus","isTestOrder","halfMeterCount","abr","Toast","makeStyles","theme","toolbar","flexGrow","color","root","menuButton","marginRight","spacing","createMuiTheme","palette","main","props","toastMsg","toastType","toastTopBottom","subscribe","toast","setState","Fragment","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","severity","Component","BottomBar","onShowCartDialog","BottomNavigation","style","width","bottom","zIndex","marginTop","borderTop","Grid","justify","container","direction","alignItems","Badge","badgeContent","onClick","name","ShoppingBasketOutlined","Button","right","RegisterCustomer","myTxId","checkTimer","tab","termsAccept","total_ir","account","bal","baltotal","isRtl","discode","waitingforpayment","showOk","result","characters","charactersLength","random","URL","uid","searchParams","get","l","close","params","showPaypal","devid","getQueryVariable","payconfig","finally","paypal","makeid","planid","Buttons","onInit1","actions","disable","fullName","value","mobile","shopName","validateEmail","reject","txid","resolve","createSubscription","subscription","create","plan_id","onApprove","completeOrder","paydetails","orderid","alertOpen","alertMessage","alertOrderNo","onError","render","plan","price_usd","discodes","usd","tt","price_irr","irr","product","chooseProduct","alert","toman","confirm","baltype","touid","fuid","op","desc","clearInterval","setInterval","checktimer","checkmsg","dt2","toISOString","checktimers","r","paid","orderResult","checkwait","getMsg","camount","classes","minHeight","marginBottom","className","xs","sm","md","Paper","padding","paddingTop","paddingBottom","textAlign","backgroundColor","elevation","maxWidth","Typography","variant","target","fontSize","margin","uuid","prompt","Object","keys","trim","setDiscode","FormLabel","RadioGroup","row","aria-labelledby","onChange","k","FormControlLabel","clear","control","Radio","label","plan_labels","TextField","required","fullWidth","inputRef","display","justifyContent","numberWithCommas","toman_btn_ipg","buy","disabled","toman_btn","crypto_btn","buy_from_balance_btn","FormControl","InputLabel","Select","labelId","balType","calcBalTotal","MenuItem","Dialog","DialogTitle","DialogContent","minWidth","component","dangerouslySetInnerHTML","__html","DialogActions","useStyles","OfferOptionsDialog","app","showDrawer","chosen","offerTotal","offerFood","foods","typeid","o","findByKeyValue","types","offerDetail","AppBar","Toolbar","IconButton","edge","aria-label","List","ListItem","button","offerdetailid","ListItemText","primary","ListItemSecondaryAction","note","marginLeft","placeholder","defaultValue","preventDefault","cnt","height","Box","selectedCount","addOfferToCart","Drawer","anchor","PaperProps","findOptions","chooseFood","selectedFfoodid","contextType","MessageBox","WaitingProgress","Backdrop","flexDirection","CircularProgress","themeLight","typography","fontFamily","themeDark","App","user","fatalError","reload","init","appTheme","top","left","backgroundSize","backgroundPosition","Container","height1","fontWeight","Hidden","mdUp","Boolean","hostname","match","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b242c00d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AppContext = React.createContext(null);\r\nexport default AppContext\r\n","import { GroupBy, IsEmpty, Map } from \"react-lodash\"\r\nimport map from 'lodash/map'\r\n\r\nexport default class Util {\r\n    static instance = Util.instance || new Util()\r\n\r\n\r\n    isOnMobile(){\r\n        let isMobile = false;\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) {\r\n            isMobile = true;\r\n        }\r\n        return isMobile;\r\n    }\r\n    isOnAndroid(){\r\n        let ua = navigator.userAgent.toLowerCase();\r\n        let isAndroid = ua.indexOf(\"android\") > -1; //&& ua.indexOf(\"mobile\");\r\n        return isAndroid;\r\n    }\r\n\r\n    isNative(){\r\n        return (window.Capacitor && window.Capacitor.platform) ? true: false;\r\n    }\r\n    helloWorld() {\r\n        let v = map([6.1, 4.2, 6.3], Math.floor);\r\n        console.log(v);\r\n        console.log(\"Hello World... \\(^_^)/ !!\")\r\n    }\r\n\r\n    static str(object){\r\n        return object? object+\"\" : \"\";\r\n    }\r\n    hash(str) {\r\n        var hash = 0, i, chr;\r\n        for (i = 0; i < str.length; i++) {\r\n            chr = str.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + chr;\r\n            hash |= 0; // Convert to 32bit integer\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    padnumber(num, size) {\r\n        //console.log(num);\r\n        var s = \"          \" + num;\r\n        return s.substr(s.length - size);\r\n    }\r\n\r\n    validateEmail(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(email);\r\n    }\r\n    formatPrice(price) {\r\n        price = price * 1;\r\n        if (price >= 0)\r\n            return \"£\" + price.toFixed(2);\r\n        return \"\";\r\n    }\r\n\r\n    sortByKey(array, key) {\r\n        return array.sort(function(a, b) {\r\n            var x = a[key]; var y = b[key];\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        });\r\n    }\r\n    findByKeyValue(array, key, val) {\r\n        for (var i=0; i < array.length; i++) {\r\n            if (array[i][key] === val) {\r\n                return array[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    getStackTrace() {\r\n        let obj = {};\r\n        Error.captureStackTrace(obj, this.getStackTrace);\r\n        return obj.stack;\r\n    }\r\n\r\n    formatDate(date, format, utc) {\r\n        let MMMM = [\"\\x00\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let MMM = [\"\\x01\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        let dddd = [\"\\x02\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        let ddd = [\"\\x03\", \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n        function ii(i, len) {\r\n            let s = i + \"\";\r\n            len = len || 2;\r\n            while (s.length < len) s = \"0\" + s;\r\n            return s;\r\n        }\r\n\r\n        let y = utc ? date.getUTCFullYear() : date.getFullYear();\r\n        format = format.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + y);\r\n        format = format.replace(/(^|[^\\\\])yy/g, \"$1\" + y.toString().substr(2, 2));\r\n        format = format.replace(/(^|[^\\\\])y/g, \"$1\" + y);\r\n\r\n        let M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\r\n        format = format.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + MMMM[0]);\r\n        format = format.replace(/(^|[^\\\\])MMM/g, \"$1\" + MMM[0]);\r\n        format = format.replace(/(^|[^\\\\])MM/g, \"$1\" + ii(M));\r\n        format = format.replace(/(^|[^\\\\])M/g, \"$1\" + M);\r\n\r\n        let d = utc ? date.getUTCDate() : date.getDate();\r\n        format = format.replace(/(^|[^\\\\])dddd+/g, \"$1\" + dddd[0]);\r\n        format = format.replace(/(^|[^\\\\])ddd/g, \"$1\" + ddd[0]);\r\n        format = format.replace(/(^|[^\\\\])dd/g, \"$1\" + ii(d));\r\n        format = format.replace(/(^|[^\\\\])d/g, \"$1\" + d);\r\n\r\n        let H = utc ? date.getUTCHours() : date.getHours();\r\n        format = format.replace(/(^|[^\\\\])HH+/g, \"$1\" + ii(H));\r\n        format = format.replace(/(^|[^\\\\])H/g, \"$1\" + H);\r\n\r\n        let h = H > 12 ? H - 12 : H == 0 ? 12 : H;\r\n        format = format.replace(/(^|[^\\\\])hh+/g, \"$1\" + ii(h));\r\n        format = format.replace(/(^|[^\\\\])h/g, \"$1\" + h);\r\n\r\n        let m = utc ? date.getUTCMinutes() : date.getMinutes();\r\n        format = format.replace(/(^|[^\\\\])mm+/g, \"$1\" + ii(m));\r\n        format = format.replace(/(^|[^\\\\])m/g, \"$1\" + m);\r\n\r\n        let s = utc ? date.getUTCSeconds() : date.getSeconds();\r\n        format = format.replace(/(^|[^\\\\])ss+/g, \"$1\" + ii(s));\r\n        format = format.replace(/(^|[^\\\\])s/g, \"$1\" + s);\r\n\r\n        let f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\r\n        format = format.replace(/(^|[^\\\\])fff+/g, \"$1\" + ii(f, 3));\r\n        f = Math.round(f / 10);\r\n        format = format.replace(/(^|[^\\\\])ff/g, \"$1\" + ii(f));\r\n        f = Math.round(f / 10);\r\n        format = format.replace(/(^|[^\\\\])f/g, \"$1\" + f);\r\n\r\n        let T = H < 12 ? \"AM\" : \"PM\";\r\n        format = format.replace(/(^|[^\\\\])TT+/g, \"$1\" + T);\r\n        format = format.replace(/(^|[^\\\\])T/g, \"$1\" + T.charAt(0));\r\n\r\n        let t = T.toLowerCase();\r\n        format = format.replace(/(^|[^\\\\])tt+/g, \"$1\" + t);\r\n        format = format.replace(/(^|[^\\\\])t/g, \"$1\" + t.charAt(0));\r\n\r\n        let tz = -date.getTimezoneOffset();\r\n        let K = utc || !tz ? \"Z\" : tz > 0 ? \"+\" : \"-\";\r\n        if (!utc) {\r\n            tz = Math.abs(tz);\r\n            let tzHrs = Math.floor(tz / 60);\r\n            let tzMin = tz % 60;\r\n            K += ii(tzHrs) + \":\" + ii(tzMin);\r\n        }\r\n        format = format.replace(/(^|[^\\\\])K/g, \"$1\" + K);\r\n\r\n        let day = (utc ? date.getUTCDay() : date.getDay()) + 1;\r\n        format = format.replace(new RegExp(dddd[0], \"g\"), dddd[day]);\r\n        format = format.replace(new RegExp(ddd[0], \"g\"), ddd[day]);\r\n\r\n        format = format.replace(new RegExp(MMMM[0], \"g\"), MMMM[M]);\r\n        format = format.replace(new RegExp(MMM[0], \"g\"), MMM[M]);\r\n\r\n        format = format.replace(/\\\\(.)/g, \"$1\");\r\n\r\n        return format;\r\n    }\r\n\r\n}","import {Subject} from 'rxjs';\r\nimport Util from './Util';\r\nimport crypto from 'crypto';\r\n\r\nimport {errorObject} from \"rxjs/internal-compatibility\";\r\nimport Cart from \"./Cart\";\r\n\r\n\r\nexport default class Site {\r\n    static instance = Site.instance || new Site()\r\n\r\n    sitekey = \"\";\r\n    site = {\r\n        state: '',\r\n        registration_pp_plan_id: '',\r\n        registration_pp_client_id:''\r\n    };\r\n    auth = {};\r\n    siteSubject = new Subject();\r\n    authSubject = new Subject();\r\n    fatalErrorSubject = new Subject();\r\n    toastSubject = new Subject();\r\n    messageBoxSubject = new Subject();\r\n    waitingSubject = new Subject();\r\n    baseApiUrl = 'https://app.touristviews724.com/app/v1/';\r\n    resp1 = null;\r\n\r\n    getQueryVariable(variable)\r\n    {\r\n        var query = window.location.search.substring(1);\r\n        console.log(query)//\"app=article&act=news_content&aid=160990\"\r\n        var vars = query.split(\"&\");\r\n        console.log(vars) //[ 'app=article', 'act=news_content', 'aid=160990' ]\r\n        for (var i=0;i<vars.length;i++) {\r\n            var pair = vars[i].split(\"=\");\r\n            console.log(pair)//[ 'app', 'article' ][ 'act', 'news_content' ][ 'aid', '160990' ]\r\n            if(pair[0] == variable){return pair[1];}\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n    callApi(url, data) {\r\n        let formData = new URLSearchParams();\r\n        if (data == null) data = {};\r\n        data._t = Date.now() + '';\r\n        let _str = JSON.stringify(data).replace(/\"/g, '')\r\n        //console.log(_str)\r\n        let _h = crypto.createHash('md5').update(_str).digest('hex');\r\n        data._h = _h;\r\n\r\n        for (let f in data) {\r\n            formData.append(f, data[f]);\r\n        }\r\n        let promise = fetch(this.baseApiUrl + url, {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }, body: formData\r\n        })\r\n        return promise.then(resp =>  resp.text() )\r\n            .then(resp=> {\r\n                this.resp1=resp\r\n                return JSON.parse(resp)\r\n            })\r\n    }\r\n\r\n    constructor() {\r\n        if (!('contains' in String.prototype)) {\r\n            String.prototype.contains = function (str, startIndex) {\r\n                return -1 !== String.prototype.indexOf.call(this, str, startIndex);\r\n            };\r\n        }\r\n    }\r\n\r\n    init() {\r\n        window.onerror = (message, file, line, col, error) => {\r\n            this.sendEventLog({\r\n                data: JSON.stringify({\r\n                    message: {\r\n                        message: message,\r\n                        file: file,\r\n                        line: line,\r\n                        col: col,\r\n                        error: error.message,\r\n                        stack: Util.instance.getStackTrace()\r\n                    }\r\n                }),\r\n                event: \"pageerror\"\r\n            })\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    catchErrorInApi(e) {\r\n\r\n//        if ((error+\"\").indexOf('Unexpected token',0)>-1) error=\"Connection Error\";\r\n        let err = e+\"\"\r\n        let errresp = this.resp1\r\n       // this.fatalErrorSubject.next(\"Error: \" + err)\r\n        if (err.contains(\"SSL error\")) {\r\n            err = Util.instance.formatDate(new Date(), \"yyyy/MM/dd hh:mm:ss Z\") + \" **THE DATE & TIME ON YOUR PC MAY BE INVALID. UPDATE IT PLEASE** \" + err\r\n        }\r\n        setTimeout(() => {\r\n            Site.instance.sendEventLog({\r\n                data: JSON.stringify({\r\n                    err: err,\r\n                    resp: errresp,\r\n                    stack: e.stack\r\n                }), event: \"apierror\"\r\n            })\r\n        }, 2000)\r\n        this.showToast(err, \"error\", \"bottom\");\r\n//        console.log(error);\r\n    }\r\n\r\n    completeOrder(orderParams, resultCallback) {\r\n        let data = orderParams\r\n        this.callApi(\"/plisio\", data)\r\n            .then(res => {\r\n                if (res.url) {\r\n                    window.location.href=res.url\r\n                } else {\r\n                }\r\n            }).catch(err => this.catchErrorInApi(err))\r\n    }\r\n    showToast(msg, type, position) {\r\n        this.showWaiting(false, \"\")\r\n        this.toastSubject.next({msg: msg, type: type, position: position});\r\n    }\r\n\r\n    showMessageBox(msg, title, type) {\r\n        this.showWaiting(false, \"\")\r\n        this.messageBoxSubject.next({msg: msg, title: title, type: type});\r\n    }\r\n\r\n    showWaiting(show, msg) {\r\n        this.waitingSubject.next({msg: msg, show: show});\r\n    }\r\n\r\n\r\n    sendEventLog(data) {\r\n\r\n        let _navigator = {};\r\n        for (let i in navigator) _navigator[i] = navigator[i];\r\n        data._nav = JSON.stringify(_navigator)\r\n\r\n        this.callApi(\"/eventlog\", data)\r\n            .then((data) => {\r\n                console.log(data);\r\n            }).catch(e=>{})\r\n    }\r\n\r\n    addPaypalScript() {\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://www.paypal.com/sdk/js?client-id=\" + Site.instance.site.registration_pp_client_id + \"&vault=true&intent=subscription\";\r\n        script.async = true;\r\n        script.onerror = () => {\r\n            let data = {\r\n                stacktrace: Util.instance.getStackTrace()\r\n            }\r\n            // defer to\r\n            setTimeout(() => {\r\n                Site.instance.sendEventLog({data: JSON.stringify(data), event: \"ppjsloaderror\"})\r\n            }, 5000)\r\n\r\n        }\r\n        document.body.appendChild(script);\r\n    }\r\n\r\n}\r\n","import { Subject } from 'rxjs';\r\nimport {GroupBy, IsEmpty, IsNaN, Map} from \"react-lodash\"\r\nimport map from 'lodash/map'\r\nimport Util from \"./Util\";\r\nimport Site from \"./Site\";\r\n\r\nexport default class Cart {\r\n    static instance = Cart.instance || new Cart()\r\n\r\n    cart=[];\r\n    deliveryMethod=\"Delivery\";\r\n    paymentMethod=\"Online\";\r\n    totalCartValue=0;\r\n    subtotal=0;\r\n    totalCartFoodCount= 0;\r\n    deliveryCharge=0;\r\n    discount=0;\r\n    deliveryAddress={\r\n        person:\"\",\r\n        address1:\"\",\r\n        address2:\"\",\r\n        postcode:\"\",\r\n        city:\"\",\r\n        phone:\"\",\r\n        addressnote:\"\"\r\n    }\r\n\r\n    simpleProps = [\"cart\",\"deliveryMethod\",\"paymentMethod\",\"totalCartValue\",\r\n        \"subtotal\",\"totalCartFoodCount\",\"deliveryCharge\",\"discount\",\"deliveryAddress\"]\r\n\r\n\r\n\r\n    clearCart(){\r\n        this.cart=[];\r\n        this.deliveryMethod=\"Delivery\";\r\n        this.paymentMethod=\"Online\";\r\n        this.totalCartValue=0;\r\n        this.subtotal=0;\r\n        this.totalCartFoodCount= 0;\r\n        this.deliveryCharge=0;\r\n        this.discount=0;\r\n        this.deliveryAddress={\r\n            person:\"\",\r\n            address1:\"\",\r\n            address2:\"\",\r\n            postcode:\"\",\r\n            city:\"\",\r\n            phone:\"\",\r\n            addressnote:\"\"\r\n        }\r\n    }\r\n\r\n    copyProps(src, dst){\r\n        for (let i in this.simpleProps)\r\n            dst[this.simpleProps[i]] = src[this.simpleProps[i]]\r\n    }\r\n    saveToStorage(){\r\n        if (!this.totalCartFoodCount) return;\r\n        let data={}\r\n        data._t=+new Date()\r\n        this.copyProps(this, data)\r\n        localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    }\r\n    loadFromStorage(){\r\n        let data = localStorage.getItem(\"cart\");\r\n        if (!data) return;\r\n        try {\r\n            data = JSON.parse(data)\r\n        } catch(e) {\r\n            localStorage.removeItem(\"cart\")\r\n            data=null\r\n            return\r\n        }\r\n\r\n        let now=+new Date()\r\n        if (now-data._t<15*60*1000) {\r\n            this.copyProps(data, this)\r\n            this.cartSubject.next(\"\")\r\n        }else{\r\n            localStorage.removeItem(\"cart\")\r\n        }\r\n\r\n    }\r\n    cartSubject=new Subject();\r\n    showDialogSubject = new Subject();\r\n\r\n    addToCart(food) {\r\n        if (food.prices.length === 1) {\r\n            let food2 = JSON.parse(JSON.stringify(food));\r\n            food2.total = food2.prices[0].price * 100/100;\r\n            this.addToCartObject(food2);\r\n        }\r\n    }\r\n\r\n    findToppingPrice(food, topping, toppingprice) {\r\n        let tcategoryids = Site.instance.foodinfo.foodtcategory.filter(cat=> cat.foodid===food.foodid).map(cat=>cat.tcategoryid);\r\n        if (tcategoryids.length===0) tcategoryids.push(-1);\r\n        let size = food.selectedSize;\r\n        if (!size) size=null;\r\n        let sizeid = size===null? null : size.id;\r\n        let prices = toppingprice.filter((p) =>\r\n                (p.tcategoryid === null || tcategoryids.includes(p.tcategoryid)) &&\r\n                (p.toppingid ===null || p.toppingid === topping.toppingid) &&\r\n                (p.sizeid===null || p.sizeid === sizeid));\r\n        prices.sort().reverse();\r\n\r\n        if (prices.length>0){\r\n            let price=prices[0];\r\n            return [price.price*1, topping.count];\r\n        }\r\n        return [0, topping.count];\r\n    }\r\n\r\n    changeDeliveryMethod(method){\r\n        this.deliveryMethod=method;\r\n        this.updateTotal();\r\n    }\r\n    changePaymentMethod(method){\r\n        this.paymentMethod=method;\r\n        this.updateTotal();\r\n    }\r\n    removeFromCart(food) {\r\n        let i = this.cart.indexOf(food);\r\n        if (i>-1) {\r\n            if (this.cart[i].count > 1)\r\n                this.cart[i].count--;\r\n            else {\r\n                this.cart.splice(i, 1);\r\n            }\r\n            this.updateTotal()\r\n        }\r\n    }\r\n\r\n\r\n    findPriceByOptions(food, model, size, freeToppingCount) {\r\n        console.log(\"FTC: \" + freeToppingCount)\r\n        let price = null;\r\n        if (!model) model = null;\r\n        if (!size) size = null;\r\n        if (!food || !food.prices) return null;\r\n        if (!size && model)\r\n            price = food.prices.find(x => x.modelid === model.id && x.sizeid === \"0\");\r\n        if (size && !model)\r\n            price = food.prices.find(x => x.sizeid === size.id && x.modelid === \"0\");\r\n        if (model && size)\r\n            price = food.prices.find(x => x.sizeid === size.id && x.modelid === model.id);\r\n        if (food.prices.length===1)\r\n            price=food.prices[0];\r\n        if (!food.prices || food.prices.length===0){\r\n            Site.instance.showMessageBox(\"Error adding food to basket\", \"Error\", \"\")\r\n            return 9999;\r\n        }\r\n        food.toppings && food.toppings.forEach(topping =>{\r\n            if (!('count' in topping)) topping.count = topping.checked * 1;\r\n        });\r\n\r\n        let abbrsm = food.toppings? food.toppings.filter(topping =>\r\n              topping.checked * 1===1 && topping.count===0\r\n        ).map((topping) => `-${topping.abbr}`): [];\r\n        let abbrsp = food.toppings? food.toppings.filter(topping =>\r\n            topping.count-topping.checked * 1>0\r\n            ).map((topping) => `+${(topping.count-topping.checked * 1)===1?\"\":(topping.count-topping.checked * 1)}${topping.abbr}`):[];\r\n\r\n        let abbrs = abbrsm.concat(abbrsp);\r\n        food.toppingsabbr=abbrs.join(' ');\r\n        food.lesstoppings = (food.toppings? food.toppings.filter(topping =>\r\n            topping.checked * 1===1 && topping.count===0\r\n        ).map((topping) => `${topping.toppingid}`): []).join(',');\r\n        food.extratoppings = (food.toppings? food.toppings.filter(topping =>\r\n            topping.count-topping.checked * 1>0\r\n        ).map((topping) => `${topping.toppingid}`):[]).join(',');\r\n\r\n        let baseselected = food.toppings && food.toppings.filter(topping => topping.checked*1 > 0);\r\n        let selected = food.toppings && food.toppings.filter((topping) => topping.count > 0);\r\n        let basetpsList = [];\r\n        let tpsList = [];\r\n\r\n        baseselected && baseselected.forEach((t) => {\r\n            let p = this.findToppingPrice(food, t, Site.instance.foodinfo.toppingprice);\r\n            if (p) {\r\n                let tp = p[0];\r\n                basetpsList.push(tp);\r\n            }\r\n        })\r\n\r\n        selected && selected.forEach((t) => {\r\n            let p = this.findToppingPrice(food, t, Site.instance.foodinfo.toppingprice);\r\n            if (p) {\r\n                let tp = p[0];\r\n                let tc = p[1];\r\n                for (let i = 0; i < tc; i++) tpsList.push(tp);\r\n            }\r\n        })\r\n        tpsList.sort();\r\n\r\n        let freeCount = freeToppingCount - (baseselected? baseselected.length: 0)\r\n        let tpsListP = tpsList.slice(freeCount,tpsList.length);\r\n        let basetps = basetpsList.reduce((a, b) => a + b, 0)\r\n        let tps = tpsListP.reduce((a, b) => a + b, 0)\r\n        let tpsDiff = ((tps-basetps)>0)? tps-basetps : 0\r\n\r\n        let totalPrice = price ? Math.round((price.price * 1 + tpsDiff)*100)/100 : undefined;\r\n        return totalPrice;\r\n    }\r\n\r\n    computeFoodHash(food){\r\n        let f1 = JSON.parse(JSON.stringify(food));\r\n        delete f1.count\r\n        delete f1.prices\r\n        delete f1.toppings\r\n        if (food.details)\r\n            food.details.map((detail)=>{\r\n            delete detail.selectedFood.prices\r\n            delete detail.selectedFood.toppings\r\n        })\r\n        return Util.instance.hash(JSON.stringify(f1));\r\n    }\r\n\r\n    addOfferToCart(offer){\r\n        if (!offer.count) offer.count=1;\r\n        let extra = 0;\r\n        offer.details.map((detail)=>{\r\n            if (detail.selectedFood && detail.selectedFood.extraOfferPrice) extra+=detail.selectedFood.extraOfferPrice;\r\n            delete detail.selectedFood.prices\r\n            delete detail.selectedFood.toppings\r\n        })\r\n        offer.total =Math.round((offer.price*1 + extra)*100)/100\r\n        this.addToCartObject(offer);\r\n    }\r\n    addToCartWithOptions(foodToAdd) {\r\n        let food = foodToAdd ; //JSON.parse(JSON.stringify(foodToAdd));\r\n        let p = food.totalWithOptionPrice + (food.extraOfferPrice? food.extraOfferPrice: 0);\r\n        // p = this.findPriceByOptions(foodToAdd, foodToAdd.selectedModel, foodToAdd.selectedSize);\r\n        if (p===undefined)\r\n            return false;\r\n        food.total = Math.round(p*100)/100;\r\n        this.addToCartObject(food);\r\n        return true;\r\n\r\n    }\r\n    addToCartObject(food) {\r\n        if (!('count' in food)) food.count = 1;\r\n        delete food.prices\r\n        delete food.toppings\r\n\r\n        food.hash = this.computeFoodHash(food)\r\n        let foodexisted = this.cart.find(c => c.hash === food.hash);\r\n        let newcart = this.cart;\r\n        if (foodexisted)\r\n            foodexisted.count+=food.count;\r\n        else {\r\n            newcart = [...this.cart, food];\r\n            this.cart=newcart;\r\n        }\r\n        this.updateTotal()\r\n    }\r\n\r\n    deliveryChargeCalc(postcode, deliveryChargeRules, deliveryMethod) {\r\n        if (deliveryMethod === \"Pickup\") return 0;\r\n        if (!deliveryChargeRules || deliveryChargeRules === '' || !postcode) return 0;\r\n        if (!isNaN(deliveryChargeRules)) return deliveryChargeRules*1;\r\n        postcode = postcode.replace(\" \", \"\");\r\n        let lastDigit = 0;\r\n        for (let i = postcode.length - 1; i >= 0; i--)\r\n            if (!isNaN(postcode.charAt(i))) lastDigit = i;\r\n        let postcode1 = postcode.substring(0, postcode.length-lastDigit-1).toLowerCase();\r\n        let deliveryChargeRules2 = deliveryChargeRules.toLowerCase().replace(' ', '').split(\";\");\r\n        let charge = -1;\r\n        for (let i = 0; i < deliveryChargeRules2.length; i++) {\r\n            if (deliveryChargeRules2[i].indexOf(\":\") === -1) continue;\r\n            let d3 = deliveryChargeRules2[i].split(\":\");\r\n            if (d3[1] === '') continue;\r\n            if (d3[0].split(',').indexOf(postcode1) > -1) {\r\n                charge = d3[1] * 1;\r\n                break;\r\n            }\r\n        }\r\n        return charge;\r\n    }\r\n\r\n\r\n    setDeliveryAddress(address){\r\n        this.deliveryAddress.person=address.person;\r\n        this.deliveryAddress.address=address.address;\r\n        this.deliveryAddress.postcode=address.postcode;\r\n        this.deliveryAddress.city=address.city;\r\n        this.deliveryAddress.phone=address.phone;\r\n    }\r\n    updateTotal() {\r\n        this.subtotal= Math.round(this.cart.reduce((a, b) => a * 1 + b.total * b.count, 0)*100)/100\r\n        this.totalCartFoodCount = this.cart.reduce((a, b) => a * 1 + b.count, 0)\r\n        let totalOffers = Math.round(this.cart.filter(item=> 'details' in item).reduce((a, b) => a * 1 + b.total * b.count, 0)*100)/100\r\n        this.deliveryCharge = Math.round(this.getDeliveryCharge(this.deliveryMethod)*100)/100;\r\n        this.discount=0;\r\n        if (!isNaN(Site.instance.site.online_discount))\r\n            this.discount=(Math.floor((this.subtotal-totalOffers) *Site.instance.site.online_discount)/100).toFixed(2)*1;\r\n        this.totalCartValue=this.subtotal-this.discount+Math.max(0, this.deliveryCharge);\r\n        this.totalCartValue=Math.round(this.totalCartValue*100)/100;\r\n        this.cartSubject.next(\"changed\");\r\n    //    console.log(\"cart totalcartvalue: \" + this.totalCartValue);\r\n    }\r\n    getDeliveryCharge(deliveryMethod){\r\n        let deliveryCharge =0;\r\n        let postcode = this.deliveryAddress && this.deliveryAddress.postcode && this.deliveryAddress.postcode!==\"\" ? this.deliveryAddress.postcode :\r\n            Site.instance.auth && Site.instance.auth.postcode && Site.instance.auth.postcode!==\"\" ? Site.instance.auth.postcode : \"\";\r\n        if (deliveryMethod === \"Delivery\" && postcode !== '')\r\n            deliveryCharge = this.deliveryChargeCalc(postcode, Site.instance.site.delivery_charge, deliveryMethod);\r\n        return deliveryCharge;\r\n    }\r\n\r\n    checkBeforeCheckoutProceed(){\r\n        if (Cart.instance.totalCartValue<Site.instance.site.minorder*1){\r\n            Site.instance.showToast(\"Minimum order is \" + Util.instance.formatPrice(Site.instance.site.minorder), \"error\", \"bottom\");\r\n            return false;\r\n        }\r\n        if (Site.instance.site.shopStatus!==\"open\" && !Site.instance.isTestOrder()){\r\n            Site.instance.showToast(\"Sorry! We are closed now.\", \"error\", \"bottom\");\r\n            return false;\r\n        }\r\n        //check for 1/4\r\n        let halfMeterCount=0;\r\n        Cart.instance.cart.forEach((f)=>{\r\n            if (f.selectedSize && f.selectedSize.abr && f.selectedSize.abr.indexOf('1/4')>-1)\r\n                halfMeterCount+=f.count;\r\n            if (f.details){\r\n                f.details.forEach((d)=>{\r\n                    if (d.selectedFood) {\r\n                        let f1=d.selectedFood\r\n                        if (f1.selectedSize && f1.selectedSize.abr && f1.selectedSize.abr.indexOf('1/4')>-1)\r\n                            halfMeterCount+=f.count;\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        if (halfMeterCount%2===1){\r\n            // cannot checkout\r\n            Site.instance.showToast(\"You must choose another Half meter pizza!\", \"error\", \"bottom\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport {createMuiTheme, makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Grid,\r\n    Button, BottomNavigation, Snackbar, Container\r\n} from \"@material-ui/core\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport Site from \"./service/Site\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        flexGrow: 1,\r\n        color: 'white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        error: {\r\n            main: \"#ff604f\"\r\n        }\r\n    }\r\n})\r\n\r\nclass Toast extends React.Component {\r\n    timer;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show:false,\r\n            toastMsg: \"\",\r\n            toastType: \"\",\r\n            toastTopBottom: \"\"\r\n        }\r\n        Site.instance.toastSubject.subscribe((toast)=>{\r\n            if (toast.msg){\r\n                if (this.state.show) {\r\n                    this.setState({show: false}, () => {\r\n                        Site.instance.toastSubject.next(toast);\r\n                    })\r\n                    return\r\n                }else {\r\n                    this.setState({\r\n                        show: true,\r\n                        toastMsg: toast.msg,\r\n                        toastType: toast.type,\r\n                        toastTopBottom: toast.position\r\n                    });\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.show &&\r\n\r\n                <Snackbar open autoHideDuration={6000}\r\n                          anchorOrigin={{vertical: this.state.toastTopBottom, horizontal: \"center\"}}\r\n                          onClose={() => {\r\n                              this.setState({show: false});\r\n                          }}>\r\n\r\n                    <Alert onClose={() => {\r\n                        this.setState({show: false});\r\n                    }} severity={this.state.toastType ? this.state.toastType : \"success\"}>\r\n                        {this.state.toastMsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n                }\r\n                    </React.Fragment>\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default Toast;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Grid,\r\n    Button, BottomNavigation\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport Util from './service/Util.js'\r\nimport Cart from \"./service/Cart\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        flexGrow: 1,\r\n        color: 'white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nclass BottomBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            totalCartValue:0,\r\n            totalCartFoodCount:0\r\n        }\r\n        Cart.instance.cartSubject.subscribe(()=>{\r\n            console.log(\"totalcartvalue: \" + Cart.instance.totalCartValue);\r\n            this.setState({totalCartValue: Cart.instance.totalCartValue, totalCartFoodCount: Cart.instance.totalCartFoodCount})\r\n        })\r\n    }\r\n    render() {\r\n        let onShowCartDialog = this.props.onShowCartDialog;\r\n        return (\r\n            this.state.totalCartFoodCount>0&&\r\n                    <BottomNavigation\r\n                        style={{\r\n                            width: '100%',\r\n                            position: 'sticky',\r\n                            bottom: 0,\r\n                            zIndex: 200,\r\n                            marginTop: 5,\r\n                            borderTop: \"1px dotted red\",\r\n                        }}>\r\n                        <Grid justify=\"center\" container\r\n                              spacing={0}\r\n                              direction=\"row\"\r\n                              alignItems=\"center\"\r\n                        >\r\n                            <Badge badgeContent={this.state.totalCartFoodCount} color=\"secondary\"\r\n                                   onClick={() => {\r\n                                       Cart.instance.showDialogSubject.next({name: \"CartDialog\", show: true})\r\n                                   }}>\r\n                                {Util.instance.formatPrice(this.state.totalCartValue)}\r\n                                <ShoppingBasketOutlined/>\r\n                            </Badge>\r\n                            <Button style={{position: \"absolute\", right: 0}} onClick={()=>{\r\n                                Cart.instance.showDialogSubject.next({name: \"CartDialog\", show: true})\r\n                            }}\r\n                                    color={\"secondary\"}>CART < ArrowForwardIosIcon/></Button>\r\n                        </Grid>\r\n                    </BottomNavigation>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BottomBar;","import React from 'react';\r\nimport {makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Container, BottomNavigation, Grid, Box, Button, Dialog, DialogActions\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport Util from './service/Util.js'\r\nimport Cart from './service/Cart.js'\r\nimport Site from './service/Site.js'\r\n\r\nclass CartDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show:false,\r\n            cartChanged:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && e.name===\"CartDialog\")\r\n                this.setState({show:e.show});\r\n        })\r\n        Cart.instance.cartSubject.subscribe(()=>{\r\n                this.setState({cartChanged:''});\r\n        })\r\n    }\r\n    handleCheckout(){\r\n\r\n        if (!Cart.instance.checkBeforeCheckoutProceed())\r\n            return;\r\n\r\n        if (Site.instance.isLogin()) {\r\n            this.setState({show: false});\r\n            Cart.instance.showDialogSubject.next({\r\n                name: \"DeliveryDialog\",\r\n                show: true\r\n            })\r\n        }else{\r\n            Cart.instance.showDialogSubject.next({\r\n                name: \"LoginDialog\",\r\n                show: true\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog fullWidth={true}\r\n                            open={true} onClose={() => this.setState({show:false})}\r\n                            className=\"minWidth300\"\r\n                    >\r\n                        <Grid container\r\n                              spacing={0}\r\n                              direction=\"column\"\r\n                              alignItems=\"center\"\r\n                              justify=\"flex-start\"\r\n                              alignContent={\"center\"}\r\n                        >\r\n                            <Container maxWidth=\"md\" style={{margin: \"0\", padding: \"0\"}} id=\"container1\">\r\n                        <AppBar position={\"sticky\"}>\r\n                            <Toolbar>\r\n                                <IconButton edge=\"start\" color=\"inherit\"\r\n                                            onClick={() => this.setState({show:false})}\r\n                                            aria-label=\"close\">\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                                <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                                    Your Order\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <Container maxWidth=\"md\" style={{padding: 15, marginBottom: 80}}>\r\n                            {Cart.instance.cart.map((food) => (\r\n                                <div style={{\r\n                                    position: \"relative\",\r\n                                    paddingBottom: 12,\r\n                                    borderBottom: \"dotted 1px\"\r\n                                }} key={food.hash}>\r\n                                    <div style={{\r\n                                        position: \"absolute\",\r\n                                        right: 0,\r\n                                        top: 0,\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"row\"\r\n                                    }}>\r\n                                        <span>{Util.instance.formatPrice(food.total * food.count)}</span>\r\n                                        <IconButton aria-label=\"remove-from-cart\"\r\n                                                    style={{padding: 2, zIndex: 100}} key=\"food.foodid\"\r\n                                                    onClick={() => Cart.instance.removeFromCart(food)}>\r\n                                            <DeleteForeverIcon/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    <div style={{position: \"relative\", left: 0, top: 0}}>\r\n                                        <Typography variant=\"subtitle1\" gutterBottom>\r\n                                            {Util.instance.padnumber(food.count, 2)}x {food.title}</Typography>\r\n                                        <Typography variant=\"caption\">\r\n                                            {food.toppings ?\r\n                                                food.toppings.filter((t) => t.checked * 1 === 1).map((topping) => (\r\n                                                    `${topping.title}`\r\n                                                )).join(' ◦ ')\r\n                                                : \"\"\r\n                                            }\r\n                                        </Typography>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            <div style={{\r\n                                position: \"relative\",\r\n                                paddingBottom: 12,\r\n                                borderTop: \"dotted 3px white\"\r\n                            }}>\r\n                                <div style={{\r\n                                    position: \"absolute\",\r\n                                    right: 0,\r\n                                    top: 0,\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                    textAlign: \"right\"\r\n                                }}>\r\n                                    <span>Subtotal: {Util.instance.formatPrice(Cart.instance.subtotal)}</span>\r\n                                    {\r\n                                        Cart.instance.discount > 0 &&\r\n                                        <span>Discount: {Util.instance.formatPrice(Cart.instance.discount)}</span>\r\n                                    }\r\n                                    {\r\n                                        Cart.instance.deliveryCharge > 0 &&\r\n                                    <span>Delivery Charge : {Util.instance.formatPrice(Cart.instance.deliveryCharge)}</span>\r\n                                    }\r\n                                    <span\r\n                                        style={{fontWeight: \"bold\"}}>Total: {Util.instance.formatPrice(Cart.instance.totalCartValue)}</span>\r\n                                </div>\r\n                            </div>\r\n                        </Container>\r\n                        <DialogActions style={{ position:\"sticky\", bottom:0,zIndex: 200,\r\n                            marginTop: 0,\r\n                            borderTop: \"1px dotted red\",\r\n                            textAlign:\"center\",\r\n                            backgroundColor:\"white\",\r\n                            height:40}}>\r\n                                <Button style={{position: \"absolute\", left: 0}} color={\"secondary\"}\r\n                                        onClick={() => {\r\n                                            this.setState({show:false})\r\n                                        }}>< ArrowBackIosIcon/> MENU </Button>\r\n                                <Box component=\"span\" m={1} style={{ margin: \"0 auto\"}}>\r\n                                    {Util.instance.formatPrice(Cart.instance.totalCartValue)}\r\n                                </Box>\r\n                                <Button style={{position: \"absolute\", right: 0}} color={\"secondary\"}\r\n                                        disabled={Cart.instance.totalCartValue===0}\r\n                                        onClick={() => {\r\n                                            this.handleCheckout();\r\n                                        }}>CHECKOUT < ArrowForwardIosIcon/></Button>\r\n                        </DialogActions>\r\n                            </Container></Grid>\r\n                    </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CartDialog;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Drawer,\r\n    TextField,\r\n    ListItemSecondaryAction,\r\n    Switch, AppBar, Toolbar, IconButton, Typography, Grid, Container, Snackbar\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport CheckOutlinedIcon from \"@material-ui/icons/CheckOutlined\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Cart from \"./service/Cart\";\r\nimport Util from \"./service/Util\";\r\nimport Site from \"./service/Site\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\nclass DeliveryDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            useDifferentAddress: false,\r\n            showDeliveryDrawer: false,\r\n            showPaymentDrawer: false,\r\n            show:false,\r\n            cartChanged:'',\r\n            deliveryAddress_postcode:'',\r\n            deliveryAddress_address1:'',\r\n            deliveryAddress_address2:'',\r\n            deliveryAddress_person:'',\r\n            deliveryAddress_city:'',\r\n            deliveryAddress_addressnote:'',\r\n            deliveryAddress_phone:'',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && (e.name===\"DeliveryDialog\" || e.name===\"*\"))\r\n                this.setState({show:e.show});\r\n        })\r\n        Cart.instance.cartSubject.subscribe(()=>{\r\n//            console.log(\"deliveryCharge \" + Cart.instance.deliveryCharge);\r\n                this.setState({cartChanged:''});\r\n        })\r\n        Site.instance.authSubject.subscribe(()=>{\r\n            this.changeDeliveryMethod(\"Delivery\");\r\n            this.changePaymentMethod(\"Online\");\r\n            this.setState({cartChanged:''});\r\n        })\r\n    }\r\n\r\n    handlePlaceOrder() {\r\n        if (this.state.useDifferentAddress){\r\n            if (!Site.instance.checkPostCode(this.state.deliveryAddress_postcode)){\r\n                Site.instance.showToast(\"Invalid postcode\", \"error\", \"bottom\")\r\n                return;\r\n            }\r\n            Cart.instance.deliveryAddress.postcode=this.state.deliveryAddress_postcode;\r\n            Cart.instance.deliveryAddress.address1=this.state.deliveryAddress_address1;\r\n            Cart.instance.deliveryAddress.address2=this.state.deliveryAddress_address2;\r\n            Cart.instance.deliveryAddress.person=this.state.deliveryAddress_person;\r\n            Cart.instance.deliveryAddress.city=this.state.deliveryAddress_city;\r\n            Cart.instance.deliveryAddress.addressnote=this.state.deliveryAddress_addressnote;\r\n            Cart.instance.deliveryAddress.phone=this.state.deliveryAddress_phone;\r\n        }else{\r\n            Cart.instance.deliveryAddress.postcode='';\r\n            Cart.instance.deliveryAddress.address1='';\r\n            Cart.instance.deliveryAddress.address2='';\r\n            Cart.instance.deliveryAddress.person='';\r\n            Cart.instance.deliveryAddress.city='';\r\n            Cart.instance.deliveryAddress.addressnote='';\r\n            Cart.instance.deliveryAddress.phone='';\r\n        }\r\n        Cart.instance.updateTotal();\r\n        if (Cart.instance.deliveryCharge>-1) {\r\n            this.setState({show: false})\r\n            Cart.instance.showDialogSubject.next({\r\n                name: \"PaymentDialog\",\r\n                show: true\r\n            })\r\n        }else{\r\n            Site.instance.showToast(\"Sorry! We cannot deliver to your address.\", \"error\", \"bottom\")\r\n        }\r\n\r\n    }\r\n\r\n    changeDeliveryMethod(method) {\r\n        Cart.instance.changeDeliveryMethod(method);\r\n        this.setState({showDeliveryDrawer: false});\r\n    }\r\n    changePaymentMethod(method) {\r\n        Cart.instance.changePaymentMethod(method);\r\n        this.setState({showPaymentDrawer: false});\r\n    }\r\n\r\n    render()\r\n        {\r\n            let auth = Site.instance.auth;\r\n            return (\r\n                this.state.show &&\r\n                        <React.Fragment>\r\n                        <Dialog open fullWidth={true} onClose={() => this.setState({show:false})}\r\n                                className=\"minWidth300\"\r\n                                style={{maxWidth: '960px', margin: '0 auto', minWidth:300}}\r\n                        >\r\n                            <AppBar position={\"static\"}>\r\n                                <Toolbar>\r\n                                    <IconButton edge=\"start\" color=\"inherit\"\r\n                                                onClick={() => this.setState({show:false})}\r\n                                                aria-label=\"close\">\r\n                                        <CloseIcon/>\r\n                                    </IconButton>\r\n                                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                                        Delivery Details\r\n                                    </Typography>\r\n                                </Toolbar>\r\n                            </AppBar>\r\n                            <DialogContent>\r\n                                <List>\r\n                                    <ListItem button   selected onClick={() => this.setState({showDeliveryDrawer: true})}\r\n                                              style={{ marginBottom: 5, marginTop: 5}}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Delivery</div>\r\n                                                <span>{Cart.instance.deliveryMethod}</span>\r\n                                                <ArrowForwardIosIcon/>\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    <ListItem button selected onClick={() => this.setState({showPaymentDrawer: true})}\r\n                                              style={{ marginBottom: 5, marginTop: 5}}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Payment</div>\r\n                                                <span>{Cart.instance.paymentMethod}</span>\r\n                                                <ArrowForwardIosIcon/>\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    { Cart.instance.deliveryCharge > 0 &&\r\n                                    <ListItem selected style={{marginBottom: 5, marginTop: 5}}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Delivery Charge</div>\r\n                                                <span>{Util.instance.formatPrice(Cart.instance.deliveryCharge)}</span>\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    }\r\n\r\n                                    <ListItem selected>\r\n                                        <ListItemText primary={Cart.instance.deliveryMethod === \"Pickup\" ? \"Collection from\" : \"Delivery to\"}\r\n                                                      secondary=\r\n                                                          {\r\n                                                              Cart.instance.deliveryMethod === \"Pickup\" ?\r\n                                                                  <span style={{whiteSpace: \"pre-line\"}}>{Site.instance.sitename} {\"\\n\"}{Site.instance.site.address}</span>\r\n                                                                  :\r\n                                                                  <React.Fragment>\r\n                                                          {!this.state.useDifferentAddress &&\r\n                                                              <React.Fragment>\r\n                                                                  <span\r\n                                                              style={{whiteSpace: \"pre-line\"}}>{auth.firstname} {auth.lastname} {\"\\n\"}\r\n                                                              {auth.flatnumber} {auth.housename} {auth.housenumer}\r\n                                                              {auth.street} {auth.town}{\"\\n\"}\r\n                                                              {auth.postcode}{\"\\n\"}\r\n                                                              {auth.addressnotes}\r\n                                                              </span>\r\n\r\n                                                              </React.Fragment>\r\n                                                          }\r\n                                                          {this.state.useDifferentAddress &&\r\n                                                              <React.Fragment>\r\n                                                                  <form noValidate >\r\n                                                                  <TextField\r\n                                                                      autoFocus\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Name\"\r\n                                                                      type=\"text\"\r\n                                                                      fullWidth\r\n                                                                      size=\"small\"\r\n                                                                      value={this.state.deliveryAddress_person}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_person: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Address 1\"\r\n                                                                      type=\"text\"\r\n                                                                      fullWidth\r\n                                                                      size=\"small\"\r\n                                                                      value={this.state.deliveryAddress_address1}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_address1: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Address 2\"\r\n                                                                      type=\"text\"\r\n                                                                      fullWidth\r\n                                                                      size=\"small\"\r\n                                                                      value={this.state.deliveryAddress_address2}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_address2: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"City\"\r\n                                                                      type=\"text\"\r\n                                                                      size=\"small\"\r\n                                                                      fullWidth\r\n                                                                      value={this.state.deliveryAddress_city}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_city: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Postcode\"\r\n                                                                      type=\"text\"\r\n                                                                      size=\"small\"\r\n                                                                      fullWidth\r\n                                                                      value={this.state.deliveryAddress_postcode}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_postcode: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Phone\"\r\n                                                                      type=\"text\"\r\n                                                                      fullWidth\r\n                                                                      size=\"small\"\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_phone: e.target.value});\r\n                                                                      }}\r\n                                                                      value={this.state.deliveryAddress_phone}\r\n                                                                  />\r\n                                                                  <TextField\r\n                                                                      margin=\"dense\"\r\n                                                                      label=\"Address Note\"\r\n                                                                      type=\"text\"\r\n                                                                      fullWidth\r\n                                                                      size=\"small\"\r\n                                                                      value={this.state.deliveryAddress_addressnote}\r\n                                                                      onChange={(e)=>{\r\n                                                                          e.preventDefault();\r\n                                                                          this.setState({deliveryAddress_addressnote: e.target.value});\r\n                                                                      }}\r\n                                                                  />\r\n                                                                  </form>\r\n                                                              </React.Fragment>\r\n                                                          }\r\n                                                                  </React.Fragment>\r\n                                                          } />\r\n\r\n                                    </ListItem>\r\n                                    {Cart.instance.deliveryMethod === \"Delivery\" &&\r\n                                    <ListItem selected>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}></div>\r\n                                                <Button onClick={() => {\r\n                                                    Cart.instance.showDialogSubject.next({name: \"ProfileDialog\", show: true})\r\n                                                }}>Update Address\r\n                                                    <ArrowForwardIosIcon/>\r\n                                                </Button>\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    }\r\n                                    {\r\n                                        false && Cart.instance.deliveryMethod === \"Delivery\" &&\r\n                                        <ListItem selected>\r\n                                            <ListItemText primary=\"Use Different Address\" />\r\n                                            <ListItemSecondaryAction>\r\n                                                <Switch\r\n                                                    edge=\"end\"\r\n                                                    onChange={() => {\r\n                                                            this.setState({useDifferentAddress: !this.state.useDifferentAddress})\r\n                                                        }\r\n                                                    }\r\n                                                    checked={this.state.useDifferentAddress}\r\n                                                />\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                    }\r\n                                </List>\r\n                                {Cart.instance.deliveryCharge === -1 &&\r\n                                <Alert  severity=\"error\">Sorry! We cannot deliver to your address.</Alert>\r\n                                }\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button color=\"secondary\" onClick={() => {\r\n                                    this.setState({show:false})\r\n                                }}>Cancel</Button>\r\n                                <Button color=\"secondary\" onClick={() => {\r\n                                    this.handlePlaceOrder()\r\n                                }} disabled={Cart.instance.deliveryCharge===-1 || Cart.instance.cart.totalCartValue<=0}>\r\n                                    { Cart.instance.paymentMethod===\"Online\"?\r\n                                        \"Pay\": \"Place Order\"}\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                            <Drawer anchor=\"bottom\"\r\n                                    style={{ maxWidth: '960px'}}\r\n                                    open={this.state.showDeliveryDrawer}\r\n                                    onClose={() => this.setState({showDeliveryDrawer: false})}\r\n                                    PaperProps={{ style: { maxWidth: 500, margin: \"0 auto\"}}}\r\n                            >\r\n\r\n                                <List>\r\n                                    <ListItem button onClick={() => this.changeDeliveryMethod(\"Delivery\")}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Delivery to My Address</div>\r\n                                                {  Cart.instance.deliveryMethod === \"Delivery\" &&\r\n                                                <CheckOutlinedIcon color=\"disabled\"/>\r\n                                                }\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    <ListItem button onClick={() => this.changeDeliveryMethod(\"Pickup\")}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Collection from Restaurant</div>\r\n                                                { Cart.instance.deliveryMethod === \"Pickup\" &&\r\n                                                <CheckOutlinedIcon color=\"disabled\"/>\r\n                                                }\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                </List>\r\n                            </Drawer>\r\n                            <Drawer anchor=\"bottom\"\r\n                                    open={this.state.showPaymentDrawer}\r\n                                    onClose={() => this.setState({showPaymentDrawer: false})}\r\n                                    PaperProps={{ style: { maxWidth: 500, margin: \"0 auto\"}}}\r\n                            >\r\n                                <List>\r\n                                    {Site.instance.site.payment.toLowerCase().includes(\"paypal\") &&\r\n                                    <ListItem button onClick={() => this.changePaymentMethod(\"Online\")}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Pay Online</div>\r\n                                                {Cart.instance.paymentMethod === \"Online\" &&\r\n                                                <CheckOutlinedIcon color=\"disabled\"/>\r\n                                                }\r\n                                            </div>}/>\r\n                                    </ListItem>\r\n                                    }\r\n                                    {Site.instance.site.payment.toLowerCase().includes(\"cash\") &&\r\n                                    <ListItem button onClick={() => this.changePaymentMethod(\"Cash\")}>\r\n                                        <ListItemText primary={\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <div style={{flexGrow: 1}}>Cash</div>\r\n                                                {Cart.instance.paymentMethod === \"Cash\" &&\r\n                                                <CheckOutlinedIcon color=\"disabled\"/>\r\n                                                }\r\n                                            </div>\r\n                                        }/>\r\n                                    </ListItem>\r\n                                    }\r\n                                </List>\r\n                            </Drawer>\r\n\r\n                        </React.Fragment>\r\n            );\r\n        }\r\n}\r\n\r\nexport default DeliveryDialog;","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport {\r\n    AppBar,\r\n    Paper,\r\n    Toolbar,\r\n\r\n    Link,\r\n    Hidden,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    ListItemSecondaryAction,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Accordion,\r\n    LinearProgress,\r\n    Container,\r\n    Grid,\r\n    MenuList,\r\n    MenuItem,\r\n    Button,\r\n    DialogContent,\r\n    CircularProgress,\r\n    TextField,\r\n    Backdrop,\r\n    DialogTitle,\r\n    DialogActions, Dialog\r\n} from \"@material-ui/core\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {PayPalButton} from \"react-paypal-button-v2\";\r\nimport Util from './service/Util';\r\nimport Site from './service/Site';\r\nimport NewReleasesOutlinedIcon from \"@material-ui/icons/NewReleasesOutlined\";\r\nimport Cart from \"./service/Cart\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport {isElementOfType} from \"react-dom/test-utils\";\r\n\r\n\r\nclass RegisterCustomer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tab: 0,\r\n            termsAccept: false,\r\n            total: 0,\r\n            total_ir: 0,\r\n            account: '',\r\n            bal: 0,\r\n            baltotal: 0,\r\n            isRtl: false,\r\n            discode: '',\r\n            waitingforpayment: false,\r\n            showOk: true\r\n        }\r\n    }\r\n\r\n    makeid(length) {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    componentDidMount() {\r\n        var url = new URL(window.location.href);\r\n        var uid = url.searchParams.get(\"uid\");\r\n        var tz = url.searchParams.get(\"tz\");\r\n        var s = url.searchParams.get(\"s\");\r\n        var l = url.searchParams.get(\"l\");\r\n        var result = url.searchParams.get(\"result\");\r\n        if (result == 'ok') {\r\n            Site.instance.showMessageBox(\"Payment Done\", \"Return to app\")\r\n            window.close();\r\n        }\r\n        if (result == 'fail') {\r\n            Site.instance.showMessageBox(\"Payment Failed\", \"Return to app\")\r\n            window.close();\r\n        }\r\n        this.setState({params: {uid: uid, s: s, l: l}})\r\n\r\n        Site.instance.siteSubject.subscribe(() => {\r\n            setTimeout(() => {\r\n                this.showPaypal()\r\n            }, 2000)\r\n        })\r\n\r\n        let devid = Site.instance.getQueryVariable(\"devid\")\r\n\r\n        Site.instance.showWaiting(true, \"Wait...\")\r\n        Site.instance.callApi(\"payconfig\", {devid: devid, s: s, tz: tz}).then((d) => {\r\n            if (d && d.result && d.data) {\r\n                let isRtl = !/^[\\x00-\\x7F]+$/g.test(JSON.stringify(d.data))\r\n                if (isRtl) window.document.body.style.direction = 'rtl'\r\n                this.setState({payconfig: d.data, isRtl: isRtl})\r\n            }\r\n        }).finally(() => {\r\n            Site.instance.showWaiting(false)\r\n        })\r\n\r\n    }\r\n\r\n    numberWithCommas(x) {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    myTxId = ''\r\n    checkTimer = null\r\n\r\n    showPaypal() {\r\n        if (!window.paypal) {\r\n            Site.instance.showToast(\"Paypal not ready.\", \"error\", \"top\");\r\n            return;\r\n        }\r\n        this.myTxId = this.makeid(7)\r\n        var url = new URL(window.location.href);\r\n        var p = url.searchParams.get(\"p\");\r\n\r\n        if (!p) {\r\n            //Site.instance.showToast(\"Error! Contact RamtTD!\")\r\n            p = Site.instance.site.registration_pp_plan_id\r\n        } else {\r\n        }\r\n        console.log(p)\r\n        this.setState({planid: p})\r\n        window.paypal.Buttons(\r\n            {\r\n                onInit1: function (data, actions) {\r\n                    actions.disable()\r\n                    //alert(5)\r\n\r\n                },\r\n                onClick: (data, actions) => {\r\n                    let err = ''\r\n                    if (!err && this.fullName.value.length < 5) err = \"Enter your full name\"\r\n                    if (!err && !/^0[1-9][0-9]{9}$/.test(this.mobile.value)) err = \"Enter your correct mobile no\"\r\n                    if (!err && !/^0[1-9][0-9]{9}$/.test(this.phone.value)) err = \"Enter your correct phone no\"\r\n                    if (!err && this.shopName.value.length < 5) err = \"Enter your business name\"\r\n                    if (!err && this.address.value.length < 10) err = \"Enter your business address\"\r\n                    if (!err && !Util.instance.validateEmail(this.email.value)) err = \"Enter your email address\"\r\n                    if (!err && !this.termsAccept.checked) err = \"You have to read and accept terms and conditions \"\r\n                    if (err !== '') {\r\n                        Site.instance.showToast(err, \"error\", \"top\")\r\n                        return actions.reject();\r\n                    } else {\r\n                        //actions.enable()\r\n                        Site.instance.sendEventLog({\r\n                            data: JSON.stringify({\r\n                                txid: this.myTxId,\r\n                                email: this.email.value,\r\n                                mobile: this.mobile.value,\r\n                                shopName: this.shopName.value\r\n                            }), event: \"reg_click\"\r\n                        });\r\n                        return actions.resolve();\r\n                    }\r\n                },\r\n                createSubscription: (data, actions) => {\r\n                    Site.instance.sendEventLog({\r\n                        data: JSON.stringify({\r\n                            txid: this.myTxId,\r\n                            email: this.email.value,\r\n                            mobile: this.mobile.value,\r\n                            shopName: this.shopName.value\r\n                        }), event: \"reg_csubs\"\r\n                    });\r\n                    return actions.subscription.create({\r\n                        /* Creates the subscription */\r\n                        plan_id: p\r\n                    });\r\n                },\r\n                onApprove: (data, actions) => {\r\n\r\n                    Site.instance.sendEventLog({\r\n                        data: JSON.stringify({\r\n                            txid: this.myTxId,\r\n                            email: this.email.value,\r\n                            mobile: this.mobile.value,\r\n                            shopName: this.shopName.value\r\n                        }), event: \"reg_approve\"\r\n                    });\r\n                    Site.instance.showWaiting(true, \"Please wait ...\");\r\n                    console.log(data)\r\n                    Site.instance.completeOrder(\r\n                        {\r\n                            fullName: this.fullName.value,\r\n                            mobile: this.mobile.value,\r\n                            phone: this.phone.value,\r\n                            shopName: this.shopName.value,\r\n                            address: this.address.value,\r\n                            email: this.email.value,\r\n                            paydetails: JSON.stringify(data)\r\n                        }, (orderid, message) => {\r\n                            Site.instance.showWaiting(false, \"\");\r\n                            if (orderid === 0) {\r\n                                Site.instance.sendEventLog({\r\n                                    data: JSON.stringify({\r\n                                        txid: this.myTxId,\r\n                                        message: message,\r\n                                        email: this.email.value,\r\n                                        mobile: this.mobile.value,\r\n                                        shopName: this.shopName.value,\r\n                                        data: data\r\n                                    }), event: \"reg_appr_err\"\r\n                                })\r\n//                                Site.instance.sendEventLog({data: message, event: \"onapproveerror\"})\r\n                                Site.instance.showToast(message, \"error\", \"bottom\");\r\n                            } else {\r\n                                Site.instance.showMessageBox(\"Thank you for registration\", \"Success\", \"top\");\r\n                                Site.instance.sendEventLog({\r\n                                    data: JSON.stringify({\r\n                                        txid: this.myTxId,\r\n                                        message: message,\r\n                                        email: this.email.value,\r\n                                        mobile: this.mobile.value,\r\n                                        shopName: this.shopName.value,\r\n                                        data: data\r\n                                    }), event: \"reg_appr_ok\"\r\n                                })\r\n//                                Site.instance.sendEventLog({data: message, event: \"onapproveok\"})\r\n                                this.setState({alertOpen: true, alertMessage: message, alertOrderNo: orderid})\r\n                            }\r\n                        });\r\n\r\n                },\r\n                onError: (err) => {\r\n                    let data = {\r\n                        err: err && err.message ? err.message : err,\r\n                        stacktrace: Util.instance.getStackTrace()\r\n                    }\r\n//                    Site.instance.sendEventLog({data: JSON.stringify(data), event: \"pperror\"})\r\n                    Site.instance.sendEventLog({\r\n                        data: JSON.stringify({\r\n                            txid: this.myTxId,\r\n                            email: this.email.value,\r\n                            mobile: this.mobile.value,\r\n                            shopName: this.shopName.value,\r\n                            data: data\r\n                        }), event: \"reg_exception\"\r\n                    })\r\n                    Site.instance.showToast(\"Payment error. Try another browser or payment method\", \"error\", \"bottom\")\r\n                }\r\n            }).render('#paypalid1');\r\n    }\r\n\r\n    chooseProduct(i) {\r\n        var ii = this.state.payconfig.plan.indexOf(i)\r\n        var t = this.state.discode == '' ? this.state.payconfig.price_usd[ii] : this.state.payconfig.discodes[this.state.discode].usd[ii]\r\n        var tt = this.state.discode == '' ? this.state.payconfig.price_irr[ii] : this.state.payconfig.discodes[this.state.discode].irr[ii]\r\n        //var tt = this.state.payconfig.price_irr ? this.state.payconfig.price_irr[ii] : 0\r\n\r\n        this.setState({total: t, total_ir: tt, bal: 0, product: i})\r\n    }\r\n\r\n    getMsg(name) {\r\n        if (name == 'nouid')\r\n            if (this.state.isRtl)\r\n                return \"UID گوشی خود را وارد کنید. از صفحه اول برنامه FinalVPN پیدا کنید\"\r\n            else\r\n                return \"Enter you UID from the app screen\"\r\n    }\r\n    setDiscode(discode){\r\n        if (discode!=''){\r\n            Site.instance.callApi(\"payconfig\", {uid: this.state.params.uid, discode:discode}).then((d) => {\r\n                if (d && d.result && d.data) {\r\n                    let isRtl = !/^[\\x00-\\x7F]+$/g.test(JSON.stringify(d.data))\r\n                    if (isRtl) window.document.body.style.direction = 'rtl'\r\n                    this.setState({payconfig: d.data, isRtl: isRtl})\r\n                }\r\n            }).finally(() => {\r\n                Site.instance.showWaiting(false)\r\n            })\r\n\r\n        }\r\n        if (this.state.payconfig.discodes[discode] == undefined) {\r\n            discode = ''\r\n        }\r\n\r\n        this.setState({discode: discode}, () => {\r\n            if (this.state && this.state.product && this.state.product != '')\r\n                this.chooseProduct(this.state.product)\r\n        });\r\n        if (discode == '') {\r\n            alert(this.state.isRtl ? \"کدتخفیف وجود ندارد\" : \"Discount code invalid\");\r\n        }\r\n    }\r\n\r\n    buy(p, toman) {\r\n        if (!this.state.params || !this.state.params.uid) {\r\n            alert(this.getMsg('nouid'))\r\n            return\r\n        }\r\n        if (p == 3) {\r\n            if (!window.confirm(\"Are you sure you want to buy account for someone else?\"))\r\n                return\r\n        }\r\n        var product = ''\r\n        if (p == 1) {\r\n            product = this.state.product\r\n        }\r\n        if (p == 2) {\r\n            if (this.state.baltype == 'c') product = this.state.baltotal + 'b'\r\n            if (this.state.baltype !== 'c') product = this.state.baltype + 'b'\r\n        }\r\n\r\n        let discode = this.state.discode\r\n        let devid = Site.instance.getQueryVariable(\"devid\")\r\n        let s = Site.instance.getQueryVariable(\"s\")\r\n        let touid = this.fuid ? this.fuid.value : \"\"\r\n        let email = this.email ? this.email.value : \"\"\r\n        Site.instance.showWaiting(true, \"Wait...\")\r\n        Site.instance.callApi(\"order\", {\r\n            op: p == 3 ? 'buy' : 'create',\r\n            product: product,\r\n            devid: devid,\r\n            uid: this.state.params.uid,\r\n            email: email,\r\n            touid: touid,\r\n            s: s,\r\n            toman: toman,\r\n            discode: discode\r\n        }).then((d) => {\r\n\r\n            if (d && d.url) {\r\n                var msg = d.desc ?? \"Wait...\"\r\n                Site.instance.showMessageBox(msg, \"Wait\", 1)\r\n                window.setTimeout(()=>{\r\n                    window.location.href = d.url\r\n                }, 300)\r\n\r\n            }\r\n            if (d && d.desc) {\r\n                if (this.checkTimer != null) {\r\n                    clearInterval(this.checkTimer);\r\n                    this.checkTimer = null;\r\n                }\r\n                this.checkTimer = setInterval(() => {\r\n                    if (this.state.checktimer <= 0) {\r\n                        this.setState({\r\n                            checktimer: 0,\r\n                            checkmsg: 'زمان واریز وجه به اتمام رسید و سفارش شما کنسل شد. مجددا از داخل برنامه سفارش را شروع کنید'\r\n                        })\r\n                        clearInterval(this.checkTimer);\r\n                        this.checkTimer = null;\r\n                        return\r\n                    }\r\n                    let dt2 = new Date(this.state.checktimer * 1000).toISOString().slice(14, 19);\r\n                    this.setState({checktimer: this.state.checktimer - 1, checktimers: dt2})\r\n                    if (this.state.checktimer % 5 == 0)\r\n                        Site.instance.callApi(\"checkorder\", {orderid: d.orderid, uid: this.state.params.uid}).then(r => {\r\n                            if (r.paid == 1) {\r\n                                clearInterval(this.checkTimer);\r\n                                this.checkTimer = null;\r\n                                this.setState({waitingforpayment: false})\r\n                                Site.instance.showMessageBox('اشتراک شما فعال شد. به برنامه برگردید.', \"Message\")\r\n                                setTimeout(()=>{\r\n                                    window.close()\r\n                                },5000)\r\n                            }\r\n                        }).catch(()=>{\r\n\r\n                        }).finally(()=>{})\r\n                }, 1000);\r\n                let showOk = !d.desc.contains('...')\r\n                this.setState({waitingforpayment: true, orderResult: d, checktimer: 30 * 60, checkwait: 1, showOk: showOk})\r\n                //Site.instance.showMessageBox(d.desc, \"Message\")\r\n            }\r\n        }).finally(() => {\r\n            Site.instance.showWaiting(false)\r\n        })\r\n    }\r\n\r\n    calcBalTotal() {\r\n        let b = 0\r\n        if (this.state.baltype && this.state.baltype !== 'c') b = this.state.baltype * 1\r\n        if (this.state.baltype && this.state.baltype == 'c') b = this.state.camount * 1\r\n        if (isNaN(b)) b = 0\r\n        this.setState({baltotal: b})\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        if (!this.state.payconfig) return null\r\n        return (\r\n            <React.Fragment>\r\n\r\n\r\n                <Grid container spacing={3} style={{minHeight: \"100%\", marginTop: 1, marginBottom: 1}}\r\n                      className=\"gridNoMargin background1\" justify=\"center\"\r\n                >\r\n                    <Grid item xs={12} sm={6} md={6} style={{zIndex: 10}}>\r\n                        <Paper style={{\r\n                            padding: 10,\r\n                            paddingTop: 20,\r\n                            paddingBottom: 20,\r\n                            textAlign: \"left\",\r\n                            minHeight: 120,\r\n                            position: \"relative\",\r\n                            backgroundColor: \"#FFF\"\r\n                        }} elevation={3}>\r\n                            <div style={{textAlign: \"center\"}}>\r\n                                <img src=\"./logo.png\" style={{marginBottom: 10, maxWidth: 200}}/>\r\n                                <Typography variant=\"body2\" style={{marginBottom: 1, color: '#888'}}>\r\n                                </Typography>\r\n                                <div style={{width: '100%'}}>\r\n                                    <a style={{padding: 2}} target={\"_blank\"}\r\n                                       href={\"https://play.google.com/store/apps/details?id=com.metaphase.finalvpn\"}><img\r\n                                        style={{width: 100}} src={\"./btn_google.png\"}/></a>\r\n                                    <a style={{padding: 2}} target={\"_blank\"}\r\n                                       href={\"https://apps.apple.com/gb/app/finalvpn-app/id6447474488\"}><img\r\n                                        style={{width: 100}} src={\"./btn_appstore.png\"}/></a>\r\n                                    <a style={{padding: 2}} target={\"_blank\"}\r\n                                       href={\"https://raw.githubusercontent.com/finalvpn/finalvpn.github.io/gh-pages/finalvpn-1.1.26.apk\"}><img\r\n                                        style={{width: 100}} src={\"./btn_apk.png\"}/></a>\r\n                                </div>\r\n                                <Typography variant=\"body2\"\r\n                                            style={{marginBottom: 10, marginTop: 10, color: '#000', fontSize: 18}}>\r\n                                    {\r\n                                        this.state.params && this.state.params.uid ?\r\n                                            `UID:${this.state.params.uid}` :\r\n                                            <Button variant=\"contained\" color=\"primary\"\r\n                                                    style={{margin: 10}}\r\n                                                    onClick={() => {\r\n                                                        let uuid = prompt(\"What is your UID?\")\r\n\r\n                                                        if (uuid == null || uuid == '') return\r\n                                                        if (!/^\\d{9}$/.test(uuid)) alert(\"Invalid UID\")\r\n                                                        else {\r\n                                                            this.state.params.uid = uuid;\r\n                                                            this.setState({params: this.state.params});\r\n                                                        }\r\n                                                    }}>{this.state.isRtl ? \"UID برنامه را وارد کنید\" : \"What is your UID?\"}</Button>\r\n                                    }\r\n                                    {\r\n                                        this.state.payconfig && this.state.payconfig.discodes && Object.keys(this.state.payconfig.discodes).length > 0 ?\r\n                                            this.state.discode != '' ?\r\n                                                <div style={{margin: 10}}>\r\n                                                    {(this.state.isRtl ? 'کد تخفیف:' : \"Discount Code:\") + this.state.discode}</div> :\r\n                                                <Button variant=\"contained\" color=\"primary\"\r\n                                                        style={{margin: 10}}\r\n                                                        onClick={() => {\r\n                                                            let discode = prompt(this.state.isRtl ? \"کد تخفیف را وارد کنید\" : \"Enter Discount Code?\")\r\n                                                            discode = discode.toLowerCase().trim();\r\n                                                            if (discode!=''){\r\n                                                                this.setDiscode(discode)\r\n                                                            }\r\n\r\n\r\n                                                        }}>{this.state.isRtl ? \"وارد کردن کد تخفیف\" : \"Discount Code\"}</Button>\r\n                                            : \"\"\r\n                                    }\r\n\r\n                                    {/*&nbsp;&nbsp;○&nbsp;&nbsp; Balance: $123.00 &nbsp;&nbsp;○&nbsp;&nbsp; Expires: 3/3/2023*/}\r\n                                </Typography>\r\n                                { (1 == 2) &&\r\n                                <Tabs style={{direction: \"ltr\"}} variant=\"fullWidth\" value={this.state.tab}\r\n                                      onChange={(e, i) => {\r\n                                          console.log(i)\r\n\r\n                                          this.setState({tab: i})\r\n                                      }} aria-label=\"disabled tabs example\" centered>\r\n                                    <Tab label={this.state.isRtl ? \"خرید اکانت\" : \"Buy Account\"}/>\r\n                                    <Tab label=\"Topup\" disabled={true}/>\r\n                                    <Tab label=\"Buy for Friend\" disabled={true}/>\r\n                                </Tabs>\r\n                                }\r\n\r\n\r\n                            </div>\r\n                            {(this.state.tab == 0 || this.state.tab == 2) &&\r\n                            <Grid item xs={12} sm={12} md={12} style={{marginTop: 20}}>\r\n\r\n                                <FormLabel id=\"demo-row-radio-buttons-group-label\"></FormLabel>\r\n                                {this.state.payconfig &&\r\n                                <RadioGroup\r\n                                    style={{'direction': this.state.isRtl ? 'rtl' : 'ltr'}}\r\n                                    row\r\n                                    aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n                                    name=\"row-radio-buttons-group\"\r\n                                    onChange={(e, i) => {\r\n                                        this.chooseProduct(i)\r\n                                    }}\r\n                                >\r\n                                    {this.state.payconfig.plan.map((k, i) =>\r\n\r\n                                        <FormControlLabel value={k}\r\n                                                          style={{clear: 'both'}}\r\n                                                          control={<Radio/>}\r\n                                                          label={this.state.payconfig.plan_labels[i]}/>\r\n                                    )}\r\n                                </RadioGroup>\r\n                                }\r\n\r\n\r\n                                {false && <TextField\r\n                                    required\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Email (to get payment receipt)\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.email = e}\r\n                                />}\r\n                                {this.state.tab == 2 && <TextField\r\n                                    required\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Friend UID\"\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.fuid = e}\r\n                                />}\r\n\r\n\r\n                                <div style={{textAlign: \"center\", marginTop: 30}}>\r\n                                    {this.state.payconfig && this.state.tab == 0 &&\r\n                                    <React.Fragment>\r\n                                        <Typography variant=\"body2\" style={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: \"center\",\r\n                                            fontSize: \"large\",\r\n                                            color: \"black\"\r\n                                        }}>\r\n                                            قیمت:\r\n                                            {this.numberWithCommas(this.state.total_ir)}\r\n                                            {' '}\r\n                                        </Typography>\r\n\r\n                                        {this.state.payconfig.toman_btn_ipg && this.state.payconfig.toman_btn_ipg != '' &&\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                                style={{margin: 20}} value={\"Buy with Toman IP\"}\r\n                                                onClick={() => this.buy(this.state.tab + 1, 2)}\r\n                                                disabled={this.state.total_ir <= 0}\r\n                                        >\r\n                                            {this.state.payconfig.toman_btn_ipg}\r\n                                        </Button>\r\n                                        }\r\n                                        {this.state.payconfig.toman_btn && this.state.payconfig.toman_btn != '' &&\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                                style={{margin: 20}} value={\"Buy with Toman\"}\r\n                                                onClick={() => this.buy(this.state.tab + 1, 1)}\r\n                                                disabled={this.state.total_ir <= 0}\r\n                                        >\r\n                                            {this.state.payconfig.toman_btn}\r\n                                        </Button>\r\n                                        }\r\n\r\n\r\n                                    </React.Fragment>\r\n                                    }\r\n                                    <Typography variant=\"body2\" style={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: \"center\",\r\n                                        fontSize: \"large\",\r\n                                        color: \"black\"\r\n                                    }}>\r\n                                        Total: ${this.state.total}\r\n                                    </Typography>\r\n\r\n                                    <Button variant=\"contained\" color=\"primary\" style={{marginTop: 20}}\r\n                                            value={\"Buy with Crypto\"}\r\n                                            onClick={() => this.buy(this.state.tab + 1, 0)}\r\n                                            disabled={this.state.total <= 0}>\r\n                                        {this.state.tab == 0 ?\r\n                                            this.state.payconfig.crypto_btn :\r\n                                            this.state.payconfig.buy_from_balance_btn}\r\n                                    </Button>\r\n\r\n                                </div>\r\n                            </Grid>\r\n                            }\r\n\r\n\r\n                            {this.state.tab == 1 && <Grid item xs={12} sm={12} md={12} style={{padding: 20}}>\r\n                                <Typography style={{marginBottom: 15, marginTop: 5, color: \"grey\"}} variant=\"body2\">\r\n                                    Top up your balance (bulk buy, buy for someone else). Up to 20% off!\r\n                                </Typography>\r\n\r\n\r\n                                <FormControl fullWidth style={{marginTop: 10}}>\r\n                                    <InputLabel>Amount</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        inputRef={e => this.balType = e}\r\n                                        label=\"BalanceType\"\r\n                                        onChange={(e, v) => {\r\n                                            this.setState({baltype: e.target.value}, () => {\r\n                                                this.calcBalTotal()\r\n                                            })\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem value={\"20\"}>$20</MenuItem>\r\n                                        <MenuItem value={\"50\"}>$50 (6% off, $53 credit)</MenuItem>\r\n                                        <MenuItem value={\"100\"}>$100 (10% off, $110 credit)</MenuItem>\r\n                                        <MenuItem value={\"200\"}>$200 (20% off, $240 credit)</MenuItem>\r\n                                        <MenuItem value={\"c\"}>Custom Amount</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                {this.state.baltype && this.state.baltype == 'c' && <TextField\r\n                                    required\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Custom Amount\"\r\n                                    type=\"currency\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.camount = e}\r\n                                    onChange={(e) => {\r\n                                        this.setState({camount: e.target.value}, () => {\r\n                                            this.calcBalTotal()\r\n                                        })\r\n                                    }}\r\n                                />}\r\n\r\n                                {false &&\r\n                                <TextField\r\n                                    required\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Email (to send payment receipt)\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.email = e}\r\n                                />\r\n                                }\r\n                                <div style={{textAlign: \"center\", marginTop: 30}}>\r\n                                    <Typography variant=\"body2\" style={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: \"center\",\r\n                                        fontSize: \"large\",\r\n                                        color: \"black\"\r\n                                    }}>\r\n                                        Total: ${this.state.baltotal}\r\n                                    </Typography>\r\n                                    <Button variant=\"contained\" color=\"primary\" value={\"Buy with Crypto\"}\r\n                                            style={{marginTop: 30}}\r\n                                            onClick={() => this.buy(2, 0)}\r\n                                            disabled={this.state.baltotal <= 0}>Pay with Crypto</Button>\r\n                                </div>\r\n\r\n                            </Grid>\r\n                            }\r\n\r\n\r\n                            <div id=\"paypalid1\"></div>\r\n\r\n                            <Typography style={{fontSize: \"8px\", color: \"#888\"}}>\r\n                                {!this.state.planid ? '' : this.state.planid}\r\n                            </Typography>\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    this.state.waitingforpayment &&\r\n                    <Dialog open={true}>\r\n                        <DialogTitle>\r\nدر انتظار پرداخت\r\n                        </DialogTitle>\r\n                        <DialogContent style={{minWidth: 250, minHeight: 150}}>\r\n                            <Typography component={\"body2\"} >\r\n                                <span style={{fontSize: 29, margin:'0 auto',display:'block',textAlign:'center'}}>\r\n                                    {this.state.checkmsg && this.state.checkmsg!='' ? this.state.checkmsg : this.state.checktimers}\r\n                                </span>\r\n                            </Typography>\r\n                            <Typography component={\"body2\"}>\r\n                                <div dangerouslySetInnerHTML={{__html: this.state.orderResult.desc}}/>\r\n                            </Typography>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {this.state.showOk && <Button color=\"primary\" onClick={() => {\r\n                                this.setState({waitingforpayment: false})\r\n                            }}>OK</Button>\r\n                            }\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterCustomer;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Link,\r\n    DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Dialog\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport Site from './service/Site'\r\nimport Cart from \"./service/Cart\";\r\nimport Util from \"./service/Util\";\r\n\r\n\r\nclass LoginDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            showForRegister: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && e.name===\"LoginDialog\")\r\n                this.setState({show:e.show, showForRegister:false});\r\n        })\r\n    }\r\n\r\n    handleRegisterClick() {\r\n        if (!this.state.showForRegister) {\r\n            this.setState({showForRegister: true}, ()=>{\r\n                this.registerEmail.focus();\r\n            })\r\n\r\n        }\r\n        else if (this.state.showForRegister) {\r\n            if (this.registerEmail2.value !== this.registerEmail.value) {\r\n                this.registerEmail.focus()\r\n                Site.instance.showToast(\"Confirm your email address\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (!Util.instance.validateEmail(this.registerEmail.value)) {\r\n                Site.instance.showToast(\"Invalid email address\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerPass.value ===\"\") {\r\n                this.registerPass.focus()\r\n                Site.instance.showToast(\"Enter your password\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerPass.value !== this.registerPass2.value) {\r\n                this.registerPass.focus()\r\n                Site.instance.showToast(\"Confirm your password\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerFirstname.value===\"\") {\r\n                this.registerFirstname.focus()\r\n                Site.instance.showToast(\"Enter your first name\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerLastname.value===\"\") {\r\n                this.registerLastname.focus()\r\n                Site.instance.showToast(\"Enter your last name\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerPhone.value===\"\") {\r\n                this.registerPhone.focus()\r\n                Site.instance.showToast(\"Enter your phone number\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerStreet.value===\"\") {\r\n                this.registerStreet.focus()\r\n                Site.instance.showToast(\"Enter address line\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerTown.value===\"\") {\r\n                this.registerTown.focus()\r\n                Site.instance.showToast(\"Enter town\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n            if (this.registerPostcode.value===\"\" || !Site.instance.checkPostCode(this.registerPostcode.value)) {\r\n                this.registerPostcode.focus()\r\n                Site.instance.showToast(\"Enter valid Postcode\", \"error\", \"bottom\");\r\n                return;\r\n            }\r\n\r\n\r\n            let data = {};\r\n            data.email = this.registerEmail.value;\r\n            data.password = this.registerPass.value;\r\n            data.phone = this.registerPhone.value;\r\n            data.firstname = this.registerFirstname.value;\r\n            data.lastname = this.registerLastname.value;\r\n            data.postcode =  this.registerPostcode.value;\r\n//            data.flatnumber = this.registerFlatnumber.value;\r\n//            data.housenumber = this.registerHousenumber.value;\r\n//            data.housename = this.registerHousename.value;\r\n            data.street = this.registerStreet.value;\r\n            data.town = this.registerTown.value;\r\n            data.addressnotes = this.registerAddressnotes.value;\r\n            Site.instance.registerUser(data, (result, msg)=>{\r\n                if (result===1) {\r\n                    this.setState({show: false})\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    checkAuth(){\r\n        Site.instance.checkAuth(this.loginEmail.value, this.loginPass.value, (result, msg)=>{\r\n            if (result===0)\r\n                Site.instance.showToast(\"Login Error \" + msg, \"error\", \"bottom\");\r\n            else if (result===1){\r\n                this.setState({show:false})\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog open fullScreen={false} onClose={() => this.setState({show:false})}>\r\n                        <DialogTitle>{!this.state.showForRegister ? \"Login\" : \"Register\"}</DialogTitle>\r\n                        {!this.state.showForRegister ?\r\n                            <DialogContent>\r\n                                    <TextField\r\n                                        autoFocus\r\n                                        size=\"small\"\r\n                                        margin=\"dense\"\r\n                                        id=\"email\"\r\n                                        label=\"Email Address\"\r\n                                        type=\"email\"\r\n                                        fullWidth\r\n                                        inputRef={e => this.loginEmail = e}\r\n                                    />\r\n                                <TextField\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    id=\"pass\"\r\n                                    label=\"Password\"\r\n                                   type=\"password\"\r\n                                   inputRef={e => this.loginPass = e}\r\n                                   fullWidth\r\n\r\n                                />\r\n                                <Button  margin=\"dense\"\r\n                                        size=\"small\"\r\n                                         fullWidth\r\n                                       onClick={()=>{\r\n                                           this.setState({show:false});\r\n                                           Cart.instance.showDialogSubject.next({name: \"ForgotPassDialog\", show:true});\r\n                                       }}\r\n                                         color=\"primary\"\r\n                                         style={{justifyContent:\"flex-end\"}}\r\n                                >Forgot Password <ArrowForwardIosIcon/></Button>\r\n                            </DialogContent>\r\n                            :\r\n                            <DialogContent>\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    autoFocus\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Email Address\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerEmail = e}\r\n                                />\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    id=\"email2\"\r\n                                    label=\"Email Address Confirm\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerEmail2 = e}\r\n                                />\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerPass = e}\r\n                                />\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    id=\"pass2\"\r\n                                    label=\"Password Confirm\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerPass2 = e}\r\n                                />\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    label=\"First Name\"\r\n                                    type=\"text\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerFirstname = e}\r\n                                />\r\n                                <TextField\r\n                                    style={{marginTop:0, marginBottom:0}}\r\n                                    margin=\"dense\"\r\n                                    size=\"small\"\r\n                                    label=\"Last Name\"\r\n                                    type=\"text\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerLastname = e}\r\n                                />\r\n                                <TextField size=\"small\" label=\"Phone\" type=\"phone\" fullWidth\r\n                                           inputRef={e => this.registerPhone = e}\r\n                                           style={{marginTop:0, marginBottom:0}}/>\r\n                                <TextField size=\"small\" label=\"Address\" type=\"text\" fullWidth\r\n                                           helperText=\"Address line\"\r\n                                           inputRef={e => this.registerStreet = e}\r\n                                           style={{marginTop:0, marginBottom:0}}/>\r\n                                <TextField size=\"small\" label=\"Town\" type=\"text\" fullWidth\r\n                                           inputRef={e => this.registerTown = e}\r\n                                           style={{marginTop:0, marginBottom:0}}/>\r\n                                <TextField size=\"small\" label=\"Postcode\" type=\"postcode\" fullWidth\r\n                                           inputRef={e => this.registerPostcode = e}\r\n                                           style={{marginTop:0, marginBottom:0}}/>\r\n                                <TextField size=\"small\" label=\"Address Notes\" type=\"text\" fullWidth\r\n                                           inputRef={e => this.registerAddressnotes = e}\r\n                                           style={{marginTop:0, marginBottom:0}}/>\r\n\r\n                            </DialogContent>\r\n                        }\r\n                        <DialogActions>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.setState({show:false})\r\n                            }}>Cancel</Button>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.handleRegisterClick()\r\n                            }}>Register</Button>\r\n                            {!this.state.showForRegister ? <Button color=\"primary\" onClick={() => {\r\n                                this.checkAuth()\r\n                            }}>Login</Button> : \"\"}\r\n                        </DialogActions>\r\n\r\n\r\n                        {/*\r\n                <Dialog fullScreen open={true} onClose={()=>app.handleCloseLoginDialog(false)} >\r\n                <Grid spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                style={{ minHeight: '100vh' , padding: 10, margin: 10}}\r\n                >\r\n                <Grid item xs={12}>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                <Grid item md={true} sm={true} xs={true}>\r\n                <TextField id=\"username\" label=\"Username\" type=\"email\" fullWidth autoFocus required />\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                <Grid item md={true} sm={true} xs={true}>\r\n                <TextField id=\"username\" label=\"Password\" type=\"password\" fullWidth required />\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" justify=\"space-between\">\r\n                <Grid item>\r\n                <FormControlLabel control={\r\n                <Checkbox\r\n                color=\"primary\"\r\n                />\r\n                } label=\"Remember me\" />\r\n                </Grid>\r\n                <Grid item>\r\n                <Button disableFocusRipple disableRipple style={{ textTransform: \"none\" }} variant=\"text\" color=\"primary\">Forgot password ?</Button>\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"center\" style={{ marginTop: '10px' }}>\r\n                <Button variant=\"outlined\" color=\"primary\" style={{ textTransform: \"none\" }}>Login</Button>\r\n                </Grid>\r\n                </Grid>\r\n                </Grid>\r\n                */}\r\n                    </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginDialog;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Link,\r\n    DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Dialog\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport Site from './service/Site'\r\nimport Cart from \"./service/Cart\";\r\nimport Util from \"./service/Util\";\r\n\r\n\r\nclass ProfileDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && e.name===\"ProfileDialog\")\r\n                this.setState({show:e.show});\r\n        })\r\n    }\r\n\r\n    handleUpdateClick() {\r\n        if (this.registerPass.value!=='' && this.registerPass.value !== this.registerPass2.value) {\r\n            Site.instance.showToast(\"Confirm your password\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerFirstname.value===\"\") {\r\n            this.registerFirstname.focus()\r\n            Site.instance.showToast(\"Enter your first name\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerLastname.value===\"\") {\r\n            this.registerLastname.focus()\r\n            Site.instance.showToast(\"Enter your last name\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerPhone.value===\"\") {\r\n            this.registerPhone.focus()\r\n            Site.instance.showToast(\"Enter your phone number\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerStreet.value===\"\") {\r\n            this.registerStreet.focus()\r\n            Site.instance.showToast(\"Enter address line\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerTown.value===\"\") {\r\n            this.registerTown.focus()\r\n            Site.instance.showToast(\"Enter town\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n        if (this.registerPostcode.value===\"\" || !Site.instance.checkPostCode(this.registerPostcode.value)) {\r\n            this.registerPostcode.focus()\r\n            Site.instance.showToast(\"Enter valid Postcode\", \"error\", \"bottom\");\r\n            return;\r\n        }\r\n\r\n        let data = {};\r\n        data.update=1;\r\n        data.email=Site.instance.auth._u.username;\r\n        data.password = this.registerPass.value===\"\"? Site.instance.auth._u.pass : this.registerPass.value;\r\n        data.phone = this.registerPhone.value;\r\n        data.firstname = this.registerFirstname.value;\r\n        data.lastname = this.registerLastname.value;\r\n        data.postcode =  this.registerPostcode.value;\r\n//            data.flatnumber = this.registerFlatnumber.value;\r\n//            data.housenumber = this.registerHousenumber.value;\r\n//            data.housename = this.registerHousename.value;\r\n        data.street = this.registerStreet.value;\r\n        data.town = this.registerTown.value;\r\n        data.addressnotes = this.registerAddressnotes.value;\r\n        Site.instance.updateUserProfile(data, (result, msg)=>{\r\n            if (result===1) {\r\n                this.setState({show: false})\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog open fullWidth onClose={() => this.setState({show:false})}>\r\n                        <DialogTitle>Profile</DialogTitle>\r\n                            <DialogContent>\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"First Name\"\r\n                                    type=\"text\"\r\n                                    fullWidth\r\n                                    inputRef={e => {this.registerFirstname = e; if (e && Site.instance.auth) e.value=Site.instance.auth.firstname}}\r\n                                />\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Last Name\"\r\n                                    type=\"text\"\r\n                                    fullWidth\r\n                                    inputRef={e => {this.registerLastname = e; if (e && Site.instance.auth) e.value=Site.instance.auth.lastname}}\r\n                                />\r\n                                <TextField label=\"Phone\" type=\"phone\" fullWidth size=\"small\"\r\n                                           inputRef={e => {this.registerPhone = e; if (e && Site.instance.auth) e.value=Site.instance.auth.phone}}/>\r\n                                <TextField label=\"Address\" type=\"text\" fullWidth size=\"small\"\r\n                                           helperText=\"Address line\"\r\n                                           inputRef={e => {this.registerStreet = e; if (e && Site.instance.auth) e.value=Site.instance.auth.street}}/>\r\n                                <TextField label=\"Town\" type=\"text\" fullWidth size=\"small\"\r\n                                           inputRef={e => {this.registerTown = e; if (e && Site.instance.auth) e.value=Site.instance.auth.town}}/>\r\n                                <TextField label=\"Postcode\" type=\"postcode\" fullWidth size=\"small\"\r\n                                           inputRef={e => {this.registerPostcode = e; if (e && Site.instance.auth) e.value=Site.instance.auth.postcode}}/>\r\n                                <TextField label=\"Address Notes\" type=\"text\" fullWidth size=\"small\"\r\n                                           inputRef={e => {this.registerAddressnotes = e; if (e && Site.instance.auth) e.value=Site.instance.auth.addressnotes}}/>\r\n\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerPass = e}\r\n                                    helperText=\"Enter new password or leave it blank to keep it unchanged\"\r\n                                />\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    margin=\"dense\"\r\n                                    id=\"pass2\"\r\n                                    label=\"Password Confirm\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                    inputRef={e => this.registerPass2 = e}\r\n                                />\r\n\r\n                            </DialogContent>\r\n                        <DialogActions>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.setState({show:false})\r\n                            }}>Cancel</Button>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.handleUpdateClick()\r\n                            }}>Update</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileDialog;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Drawer,\r\n    Grid, Paper, Container\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport NewReleasesOutlinedIcon from '@material-ui/icons/NewReleasesOutlined';\r\n\r\nimport AppContext from '../AppContext'\r\nimport Util from './service/Util.js'\r\nimport Site from './service/Site.js'\r\nimport Cart from \"./service/Cart\";\r\nimport CheckOutlinedIcon from \"@material-ui/icons/CheckOutlined\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RegisterCustomer from \"./RegisterCustomer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        flexGrow: 1,\r\n        color: 'white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nclass MyAppBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            slider:0,\r\n            noappbar: false,\r\n        }\r\n    }\r\n    imagesLoad=[];\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n    <React.Fragment>\r\n\r\n    <AppBar position=\"static\"  style={{backgroundColor: \"#00000052\"}}>\r\n                        <Toolbar style={{\r\n                            // backgroundImage: \"url(\" + images[this.state.slider] + \")\",\r\n                            // backgroundSize: \"cover\",\r\n                            alignItems: 'flex-start',\r\n                            WebkitTransition: \"background-image 0.9s ease-in-out\",\r\n                            transition: \"background-image 0.9s ease-in-out\",\r\n                        }}>\r\n                            <IconButton edge=\"start\" className={useStyles.menuButton} color=\"inherit\"\r\n                                        aria-label=\"menu\" onClick={()=>{\r\n                                            Cart.instance.showDialogSubject.next({name: \"LeftDrawer\", show:true})\r\n                            }}>\r\n                                <MenuIcon/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" style={{\r\n                                flexGrow: 1,\r\n                                alignSelf: 'flex-end',\r\n                            }}>\r\n                            </Typography>\r\n\r\n                                    <IconButton aria-label=\"Account\" color=\"inherit\"\r\n                                                style={{alignItems: \"center\", display: \"flex\", fontSize: \"large\", paddingLeft:4, paddingRight:4}}\r\n                                                onClick={() => { window.location.href=\"https://finalvpn.github.io\"}}\r\n                                    >\r\n\r\n                                        <div>Back</div>\r\n                                    </IconButton>\r\n                        </Toolbar>\r\n\r\n                    </AppBar>\r\n    </React.Fragment>\r\n    );\r\n    }\r\n}\r\n\r\nexport default MyAppBar;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid,\r\n    DialogContentText,\r\n    AppBar, Toolbar, IconButton, Typography, Paper\r\n} from \"@material-ui/core\";\r\n    import { PayPalButton } from \"react-paypal-button-v2\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Cart from \"./service/Cart\";\r\nimport Site from \"./service/Site\";\r\nimport Util from \"./service/Util\";\r\n\r\n\r\nclass PaymentDialog extends React.Component {\r\n    orderid=0\r\n    inPlaceOrderProgress=false\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show:false,\r\n            cartChanged:'',\r\n            alertOpen:false,\r\n            alertMessage:\"\",\r\n            ppready:\"\" //\"Please wait...\"\r\n        }\r\n    }\r\n    showPaypalButtons(){\r\n        if (!window.paypal) {\r\n            Site.instance.showToast(\"Paypal not ready. Contact restaurant.\");\r\n            return;\r\n        }\r\n        Site.instance.getOrderId({}, (res, err) => {\r\n            if (res > 0) {\r\n                this.orderid = res;\r\n                window.paypal.Buttons(\r\n                    {\r\n                        createOrder: (data, actions)=>\r\n                        {\r\n                            try {\r\n                                let amount = Site.instance.isTestOrder() ? 0.01 : Cart.instance.totalCartValue\r\n                                Cart.instance.saveToStorage()\r\n                                let createdOrder = actions.order.create({\r\n                                    purchase_units: [{\r\n                                        amount: {\r\n                                            currency_code: \"GBP\",\r\n                                            value: amount\r\n                                        },\r\n                                        invoice_id: 'Order #' + Site.instance.site.siteid + \"#\" + this.orderid,\r\n                                    }]\r\n                                });\r\n                                return createdOrder\r\n                            }\r\n                            catch (e) {\r\n                                let data = {\r\n                                    err: e.message,\r\n                                    stacktrace:Util.instance.getStackTrace()\r\n                                }\r\n                                Site.instance.sendEventLog({data: JSON.stringify(data), event: \"ppcreateordererr\"})\r\n                                return null\r\n                            }\r\n                        },\r\n                        onApprove: (details, actions) => {\r\n                            Site.instance.showWaiting(true, \"Please wait ...\");\r\n                            Site.instance.completeOrder(\r\n                                this.orderid, { paydetails: details}, (orderid, message) => {\r\n                                    Site.instance.showWaiting(false, \"\");\r\n                                    if (orderid === 0) {\r\n                                        Site.instance.sendEventLog({data: message, event: \"onapproveerror\"})\r\n                                        Site.instance.showToast(message, \"error\", \"bottom\");\r\n                                    } else {\r\n                                        Site.instance.sendEventLog({data: message, event: \"onapproveok\"})\r\n                                        this.setState({alertOpen: true, alertMessage: message, alertOrderNo: orderid})\r\n                                    }\r\n                                });\r\n                        },\r\n                        onError:(err)=>{\r\n                            let data = {\r\n                                err: err && err.message? err.message : err,\r\n                                stacktrace: Util.instance.getStackTrace()\r\n                            }\r\n                            Site.instance.sendEventLog({data: JSON.stringify(data), event: \"pperror\"})\r\n                            Site.instance.showToast(\"Payment error. Try another browser or payment method\", \"error\", \"bottom\")\r\n                        }\r\n                    }).render('#paypalid1');\r\n            } else {\r\n                this.orderid = 0;\r\n                Site.instance.showToast(\"Cannot place order \" + err, \"error\", \"bottom\")\r\n            }\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && (e.name===\"PaymentDialog\" || e.name===\"*\")) {\r\n                this.orderid=0;\r\n                this.setState({show: e.show, alertOpen: false, alertMessage: \"\"},()=>{\r\n                    if (Cart.instance.paymentMethod === \"Online\" && Cart.instance.totalCartValue>0){\r\n                        setTimeout(()=>{\r\n                            this.showPaypalButtons()\r\n                        }, 1000);\r\n                    }\r\n                });\r\n            }\r\n        })\r\n        Cart.instance.cartSubject.subscribe(()=>{\r\n            this.setState({cartChanged:''})\r\n        })\r\n    }\r\n\r\n    render()\r\n        {\r\n            return (\r\n                this.state.show &&\r\n                        <React.Fragment>\r\n                        <Dialog  open={true} fullWidth={true} onClose={() => this.setState({show:false})}\r\n                                 style={{maxWidth: '960px', margin: '0 auto'}}\r\n                                 className=\"minWidth300\"\r\n                        >\r\n                            <AppBar style={{position:\"sticky\", top:0}}>\r\n                                <Toolbar>\r\n                                    <IconButton edge=\"start\" color=\"inherit\"\r\n                                                onClick={() => this.setState({show:false})}\r\n                                                aria-label=\"close\">\r\n                                        <CloseIcon/>\r\n                                    </IconButton>\r\n                                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                                        Payment\r\n                                    </Typography>\r\n                                </Toolbar>\r\n                            </AppBar>\r\n                            <DialogContent>\r\n                                {Cart.instance.paymentMethod === \"Online\" && Cart.instance.totalCartValue>0?\r\n                                    <React.Fragment>\r\n                                        <Grid container justify = \"center\" >\r\n                                            <Typography variant=\"h6\" align=\"center\" style={{ padding:30}}>\r\n                                                {this.state.ppready}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <div id=\"paypalid1\"></div>\r\n\r\n                                        {/*<div style={{visibility: `${this.state.ppready===\"\"? \"visible\":\"hidden\"}`}}>\r\n                                    <PayPalButton\r\n                                        onError={(error) => {\r\n                                            Site.instance.sendEventLog({data: JSON.stringify(error), event: \"paypalerror\"})\r\n                                            Site.instance.showToast(\"Error in connecting to Paypal\", \"error\", \"bottom\")\r\n                                            this.setState({ppready:\"Error in connecting to Paypal\"})\r\n                                        }}\r\n\r\n                                        onButtonReady={() => {\r\n                                            let iframes = window.document.getElementsByTagName('iframe');\r\n                                            for(let i=0; i<iframes.length; i++)\r\n                                                iframes[i]['data-hj-allow-iframe']=1;\r\n                                            Site.instance.sendEventLog({data: \"\", event: \"paypalready\"})\r\n                                            Site.instance.getOrderId({}, (res, err) => {\r\n                                                if (res > 0) {\r\n                                                    this.orderid = res;\r\n                                                    this.setState({ppready:\"\"})\r\n                                                } else {\r\n                                                    this.orderid = 0;\r\n                                                    this.setState({ppready:\"Cannot place order \" + err})\r\n                                                    Site.instance.showToast(\"Cannot place order \" + err, \"error\", \"bottom\")\r\n                                                }\r\n                                            })\r\n                                        }}\r\n                                        shippingPreference=\"NO_SHIPPING\" // default is \"GET_FROM_FILE\"\r\n                                        currency={\"GBP\"}\r\n                                        createOrder={(data, actions) => {\r\n                                            Site.instance.sendEventLog({data: \"\" + this.orderid, event: \"createorder\"})\r\n                                            return actions.order.create({\r\n                                                purchase_units: [{\r\n                                                    amount: {\r\n                                                        currency_code: \"GBP\",\r\n                                                        value: Cart.instance.totalCartValue\r\n                                                    },\r\n                                                    invoice_id: 'Order #' + Site.instance.site.siteid + \"#\" + this.orderid,\r\n                                                    custom_id: Site.instance.site.siteid\r\n                                                }],\r\n                                                application_context: {\r\n                                                    shipping_preference: \"NO_SHIPPING\" // default is \"GET_FROM_FILE\"\r\n                                                }\r\n                                            });\r\n                                        }}\r\n                                        onApprove={(details, actions) => {\r\n                                            Site.instance.sendEventLog({data: JSON.stringify(details), event: \"onapprove\"})\r\n                                            Site.instance.completeOrder(\r\n                                                this.orderid, { paydetails: details}, (orderid, message) => {\r\n                                                if (orderid === 0) {\r\n                                                    Site.instance.sendEventLog({data: message, event: \"onapproveerror\"})\r\n                                                    Site.instance.showToast(message, \"error\", \"bottom\");\r\n                                                } else {\r\n                                                    Site.instance.sendEventLog({data: message, event: \"onapproveok\"})\r\n                                                    this.setState({alertOpen: true, alertMessage: message, alertOrderNo: orderid})\r\n                                                }\r\n                                            });\r\n                                        }}\r\n                                        options={{\r\n                                            clientId: Site.instance.site.ppclientid,\r\n                                            currency: \"GBP\"\r\n                                        }}\r\n\r\n                                    /></div>*/}\r\n                                    </React.Fragment>\r\n                                    :\r\n                                    <Grid container justify = \"center\">\r\n                                        <Typography variant=\"h6\" align=\"center\" style={{ padding:30, margin:\"20px 0\"}}>\r\n                                        You have chosen to pay with cash. You can place your order now.\r\n                                        </Typography>\r\n                                    </Grid>\r\n\r\n                                }\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button color=\"secondary\" onClick={() => {\r\n                                    this.setState({show:false})\r\n                                }}>Cancel</Button>\r\n                                {Cart.instance.paymentMethod === \"Cash\" ? <Button color=\"secondary\" onClick={() => {\r\n\r\n                                    if (Cart.instance.totalCartValue<=0) return;\r\n                                        Site.instance.showWaiting(true, \"Please wait ...\");\r\n                                        Site.instance.getOrderId({}, (res, err) => {\r\n                                            Site.instance.showWaiting(false, \"\");\r\n                                            this.orderid = res;\r\n                                            if (res > 0) {\r\n                                                Site.instance.completeOrder( this.orderid, {}, (orderid, message) => {\r\n                                                    if (orderid === 0) {\r\n                                                        Site.instance.showToast(message, \"error\", \"bottom\");\r\n                                                    } else {\r\n                                                        this.setState({alertOpen: true, alertMessage: message, alertOrderNo: orderid})\r\n                                                    }\r\n                                                });\r\n                                            } else {\r\n                                                Site.instance.showToast(\"Cannot place order \" + err, \"error\", \"bottom\")\r\n                                            }\r\n                                        })\r\n                                    }}>Place Order</Button>\r\n                                    : \"\"\r\n                                }\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                            <Dialog\r\n                                open={this.state.alertOpen}\r\n                                    onClose={()=>{\r\n                                    this.setState({alertOpen:false, show:false})\r\n                                }}\r\n                                aria-labelledby=\"alert-dialog-title\"\r\n                                aria-describedby=\"alert-dialog-description\"\r\n                            >\r\n                                <DialogTitle>Order No: {this.state.alertOrderNo}</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText >\r\n                                        {this.state.alertMessage}\r\n                                    </DialogContentText>\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button onClick={()=>{\r\n                                        this.setState({alertOpen:false, show:false})\r\n                                    }} color=\"primary\" autoFocus>\r\n                                        OK\r\n                                    </Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </React.Fragment>\r\n            );\r\n        }\r\n}\r\nexport default PaymentDialog;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    TextField,\r\n    Dialog,\r\n    BottomNavigation,\r\n    Grid,\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    Radio,\r\n    Chip,\r\n    DialogActions\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport Util from './service/Util';\r\nimport Cart from './service/Cart';\r\nimport Site from './service/Site';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n\r\n\r\nclass FoodOptionsDialog extends React.Component {\r\n    modelabrs=[];\r\n    sizeabrs=[];\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            show: false,\r\n            totalWithOptionPrice: undefined,\r\n            optionSize: undefined,\r\n            optionModel: undefined,\r\n            food:{},\r\n            offerDetail:undefined,\r\n            extraOfferPrice:0,\r\n            count:1,\r\n        }\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name===\"FoodOptionsDialog\"){\r\n                let food = null;\r\n                let offerDetail=e.extra && e.extra.offerDetail? e.extra.offerDetail : undefined;\r\n                if (offerDetail)\r\n                    food = JSON.parse(JSON.stringify(offerDetail.selectedFood));\r\n                else\r\n                    food = JSON.parse(JSON.stringify(e.extra.food));\r\n                let sizeabrs1 = [...new Set(food.prices.map(item => ({abr: item.sizeabr, id: item.sizeid})))];\r\n                if (offerDetail && offerDetail.sizeid && offerDetail.sizeid>0)\r\n                    sizeabrs1 = [...new Set(food.prices.filter(s=>s.sizeid*1===offerDetail.sizeid*1).map(item => ({abr: item.sizeabr, id: item.sizeid})))];\r\n                this.sizeabrs = [...new Set(sizeabrs1.map(o => JSON.stringify(o)))].map(s => JSON.parse(s)).filter(a=>a.id*1>0);\r\n                let modelabrs1 = [...new Set(food.prices.map(item => ({abr: item.modelabr, id: item.modelid})))];\r\n                this.modelabrs = [...new Set(modelabrs1.map(o => JSON.stringify(o)))].map(s => JSON.parse(s)).filter(a=>a.id*1>0);\r\n\r\n//                console.log(this.modelabrs);\r\n  //              console.log(this.sizeabrs);\r\n                food.toppings && food.toppings.forEach(topping =>{\r\n                    if (!('count' in topping)) topping.count = topping.checked * 1;\r\n                });\r\n\r\n                food.selectedSize=this.sizeabrs.length>0? this.sizeabrs[0] : undefined;\r\n                food.selectedModel=this.modelabrs.length>0? this.modelabrs[0] : undefined;\r\n\r\n                this.setState({food: food, show:e.show, totalWithOptionPrice:undefined,\r\n                        optionSize : food.selectedSize,\r\n                        optionModel: food.selectedModel,\r\n                        count:1,\r\n                        offerDetail: offerDetail,\r\n                        extraOfferPrice:0},\r\n                    ()=>{\r\n                        this.findPriceByOptions()\r\n                    })\r\n                ;\r\n            }\r\n        })\r\n    }\r\n    optionSizeSelected(e, size) {\r\n        e.persist();\r\n        this.state.food.selectedSize=size;\r\n        this.setState({optionSize: size}, () => {\r\n            this.findPriceByOptions();\r\n        });\r\n    }\r\n\r\n    optionModelSelected(e, model) {\r\n        e.persist();\r\n        this.state.food.selectedModel=model;\r\n        this.setState({optionModel: model}, () => {\r\n            this.findPriceByOptions();\r\n        });\r\n\r\n    }\r\n\r\n    clickOnTopping(e, topping) {\r\n        e.persist();\r\n        topping.count += 1\r\n        this.setState({foodOptionDialogFood: this.state.foodOptionDialogFood}, () => {\r\n            this.findPriceByOptions();\r\n        });\r\n\r\n    }\r\n    deleteOnTopping(e, topping) {\r\n        e.persist();\r\n        if (topping.count > 0) topping.count = topping.count - 1\r\n        this.setState({foodOptionDialogFood: this.state.foodOptionDialogFood}, () => {\r\n            this.findPriceByOptions();\r\n        });\r\n    }\r\n\r\n    findPriceByOptions() {\r\n        if(this.state.food) {\r\n            let model = this.state.optionModel;\r\n            let size = this.state.optionSize;\r\n            let freeToppingCount = this.state.food.freetoppingcount *1 + (this.state.offerDetail ? this.state.offerDetail.freetoppingcount *1: 0);\r\n            let price = Cart.instance.findPriceByOptions(this.state.food, model, size, freeToppingCount);\r\n            if (price) {\r\n                let extra = 0;\r\n                if (this.state.offerDetail) {\r\n                    let origFood = Site.instance.foodinfo.foods.find(f => f.foodid === this.state.food.foodid);\r\n                    let basePrice = Cart.instance.findPriceByOptions(origFood, {id: this.state.offerDetail.modelid*1===0? model.id:this.state.offerDetail.modelid}, {id: this.state.offerDetail.sizeid*1===0? size.id : this.state.offerDetail.sizeid}, freeToppingCount);\r\n                    if (price > basePrice) {\r\n                        extra = (price - basePrice);\r\n                    }\r\n//            console.log(\"Price:\" + price + \"/ base:\" + basePrice + \"////\" + extra + \"/model:\" + model.id + \" /size:\" + size.id + \"/offer model:\" + this.state.forofferdetail.modelid + \"/ offer size:\" + this.state.forofferdetail.sizeid);\r\n                    console.log(\"Extra: \" + extra);\r\n                }\r\n                this.state.food.totalWithOptionPrice = Math.round(price*100)/100;\r\n                this.state.food.extraOfferPrice = Math.round(extra*100)/100;\r\n                this.setState({totalWithOptionPrice: price, extraOfferPrice: extra, food: this.state.food});\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog fullWidth open={true} onClose={()=>{this.setState({show:false})}}\r\n                            className=\"dlg1 minWidth300\"\r\n                            style={{maxWidth: '960px', margin: '0 auto', position:\"fixed\"}}\r\n                    >\r\n                        <AppBar position=\"sticky\" styl={{ display: \"block\"}}>\r\n                            <Toolbar>\r\n                                <IconButton edge=\"start\" color=\"inherit\"\r\n                                            onClick={()=>{this.setState({show:false})}}\r\n                                            aria-label=\"close\">\r\n                                    <CloseIcon/>\r\n                                    </IconButton>\r\n                                <Typography variant=\"h6\" style={{flexGrow: 1}}> Food Options\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n\r\n\r\n\r\n                        <Box style={{marginBottom: 10, padding: 15}} textAlign={\"left\"}>\r\n                            <Typography variant=\"h6\" align={\"center\"} width={1}>\r\n                                {this.state.food.title}\r\n                            </Typography>\r\n                            {\r\n                                this.state.food.toppings && this.state.food.toppings.filter(t=>t.checked*1>0).length>0 &&\r\n                                <Typography variant=\"h6\"  style={{fontSize: \"small\"}} align={\"center\"} width={1}>\r\n                                    { this.state.food.toppings.filter(t=>t.checked*1>0).map(t=>t.title).join(', ')}\r\n                                </Typography>\r\n                            }\r\n                                {this.modelabrs.length > 0 && <React.Fragment>\r\n                                    <FormLabel component=\"legend\">Model</FormLabel>\r\n                                    <RadioGroup row defaultValue=\"top\">\r\n                                        {\r\n                                            this.modelabrs.map((model,index) => (\r\n                                                <FormControlLabel\r\n                                                    value={model.abr}\r\n                                                    control={<Radio color=\"primary\"/>}\r\n                                                    label={model.abr}\r\n                                                    labelPlacement=\"end\"\r\n                                                    key={model.id}\r\n                                                    checked={this.state.optionModel===model}\r\n                                                    onChange={(e) => this.optionModelSelected(e, model)}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    </RadioGroup>\r\n                                </React.Fragment>\r\n                                }\r\n                                {this.sizeabrs.length > 0 && <React.Fragment>\r\n                                    <FormLabel component=\"legend\">Size</FormLabel>\r\n                                    <RadioGroup row  defaultValue=\"top\">\r\n                                        {\r\n                                            this.sizeabrs.map((size,index) => (\r\n                                                <FormControlLabel\r\n                                                    value={size.abr}\r\n                                                    control={<Radio color=\"primary\"/>}\r\n                                                    label={size.abr}\r\n                                                    labelPlacement=\"end\"\r\n                                                    key={size.id}\r\n                                                    checked={this.state.optionSize===size}\r\n                                                    onChange={(e) => this.optionSizeSelected(e, size)}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    </RadioGroup>\r\n                                </React.Fragment>\r\n                                }\r\n                                {\r\n                                    this.state.food.toppings && this.state.food.toppings.length > 1 &&\r\n                                        <Box style={{marginTop: 20, marginBottom:10}} width={1}>\r\n                                    <FormLabel component=\"legend\">Toppings</FormLabel>\r\n                                    <Box align={\"center\"} className={\"topping-chips\"}>\r\n                                        {\r\n                                            this.state.food.toppings.map((topping) => (\r\n                                                <Badge key={topping.toppingid} badgeContent={topping.count}\r\n                                                       component={\"div\"}\r\n                                                       color=\"secondary\" invisible={topping.count < 2}\r\n                                                       style={{margin: 5, width:'95%'}}>\r\n                                                    <Chip\r\n                                                        variant={ topping.count>0? undefined : \"outlined\"}\r\n                                                        component={\"div\"}\r\n                                                        style={{width:\"100%\"}}\r\n                                                        label={topping.title}\r\n                                                        color={topping.count > 0 ? \"primary\" : undefined}\r\n                                                        onClick={(e) => {\r\n                                                            this.clickOnTopping(e, topping)\r\n                                                        }}\r\n                                                        onDelete={topping.count > 0 ? (e) => {\r\n                                                            this.deleteOnTopping(e, topping)\r\n                                                        } : undefined}\r\n                                                    />\r\n                                                </Badge>\r\n                                            ))\r\n                                        }\r\n                                    </Box>\r\n                                        </Box>\r\n                                }\r\n                                <TextField\r\n                                    label=\"Note\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n\r\n                                    onInput = {(e) =>{\r\n                                        e.target.value = e.target.value.slice(0,99)\r\n                                    }}\r\n                                    inputRef={e => this.note = e}\r\n                                    style={{marginLeft:20, marginRight:20, minWidth: \"90%\"}}\r\n\r\n                                />\r\n                                {!this.state.offerDetail && <TextField\r\n                                    label=\"Quantity\"\r\n                                    type=\"number\"\r\n                                    placeholder=\"Quantity\"\r\n                                    margin=\"normal\"\r\n                                    defaultValue=\"1\"\r\n                                    onChange={(e)=>{\r\n                                        e.preventDefault();\r\n                                        let cnt = Math.max(1, e.target.value);\r\n                                        this.state.food.count=cnt;\r\n                                        this.setState({count: cnt})\r\n                                    }\r\n                                    }\r\n                                    style={{marginLeft:20, marginRight:20, maxWidth:100}}\r\n\r\n                                />\r\n                                }\r\n                        </Box>\r\n                        <DialogActions style={{ position:\"sticky\", bottom:0,zIndex: 200,\r\n                            marginTop: 0,\r\n                            borderTop: \"1px dotted red\",\r\n                            textAlign:\"center\",\r\n                            backgroundColor:\"white\",\r\n                            height:40}}>\r\n{/*\r\n                        <BottomNavigation\r\n                            style={{\r\n                                width: '100%',\r\n                                position: 'sticky',\r\n                                bottom: 0,\r\n                                zIndex: 200,\r\n                                marginTop: 0,\r\n                                borderTop: \"1px dotted red\",\r\n                                textAlign:\"center\",\r\n                                height:40\r\n                            }}>\r\n*/}\r\n                                <Box component=\"span\" m={1} style={{margin: \"0 auto\"}}>\r\n                                    {!this.state.offerDetail && this.state.totalWithOptionPrice>0 && Util.instance.formatPrice(this.state.totalWithOptionPrice*this.state.count) }\r\n                                    {this.state.offerDetail && this.state.extraOfferPrice>0 && (\"Extra \" + Util.instance.formatPrice(this.state.extraOfferPrice)) }\r\n                                </Box>\r\n                                <Button style={{position: \"absolute\", right: 0}} color={\"secondary\"}\r\n                                        disabled={this.state.totalWithOptionPrice===undefined}\r\n                                        onClick={() => {\r\n                                            if (this.state.offerDetail){\r\n                                                Cart.instance.showDialogSubject.next({\r\n                                                    name: \"OfferOptionsDialog\",\r\n                                                    show: true,\r\n                                                    extra:{offerFood:this.state.food}\r\n                                                })\r\n                                            }\r\n                                            else {\r\n                                                this.state.food.note=this.note.value;\r\n                                                Cart.instance.addToCartWithOptions(this.state.food);\r\n                                            }\r\n                                            this.setState({show: false})\r\n                                        }}>ADD\r\n                                    < ArrowForwardIosIcon/>\r\n                                </Button>\r\n\r\n                            {/*\r\n                        </BottomNavigation>\r\n*/}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default FoodOptionsDialog;","import React from 'react';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Dialog,\r\n    BottomNavigation,\r\n    Grid,\r\n    Box,\r\n    Button,\r\n    ListItemSecondaryAction, Drawer, TextField, FormControl, DialogActions\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport AppContext from '../AppContext'\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Util from \"./service/Util\";\r\nimport CheckOutlinedIcon from \"@material-ui/icons/CheckOutlined\";\r\nimport Site from './service/Site';\r\nimport Cart from './service/Cart';\r\n\r\nclass OfferOptionsDialog extends React.Component {\r\n    static contextType= AppContext;\r\n    constructor(props) {\r\n        super(props);\r\n        AppContext.app = this;\r\n        this.state = {\r\n            show:false,\r\n            offer:{},\r\n            showDrawer: false,\r\n            chosen: {},\r\n            detail:{},\r\n            offerTotal:0,\r\n            count:1,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name===\"OfferOptionsDialog\" && e.show){\r\n                if (e.extra.offerFood){\r\n                    this.state.detail.selectedFood=e.extra.offerFood;\r\n                    this.state.detail.selectedFood.count=1;\r\n                    let extra = 0;\r\n                    this.state.offer.details.map((detail)=>{\r\n                        if (detail.selectedFood && detail.selectedFood.extraOfferPrice) {\r\n                            extra+=detail.selectedFood.extraOfferPrice;\r\n                        }\r\n                    })\r\n                    this.state.offer.total =this.state.offer.price *1 + extra;\r\n                    this.setState({detail:this.state.detail, offerTotal: this.state.offer.total, count:1});\r\n                }\r\n                else\r\n                    this.setState({offer : JSON.parse(JSON.stringify(e.extra.offer)), show:e.show, showDrawer:false, chosen:{}, offerTotal: e.extra.offer.price*1, count:1})\r\n            }\r\n        })\r\n    }\r\n    findOptions(detail){\r\n        if (!detail) return [];\r\n        let foods = [];\r\n        let foodinfo = Site.instance.foodinfo;\r\n        if (detail.typeid>0) {\r\n            let o = Util.instance.findByKeyValue(foodinfo.types, 'typeid',detail.typeid);\r\n            if (o && o.title){\r\n                foods=foodinfo.foods.filter((f)=>f.typeid===o.typeid);\r\n            }\r\n        }\r\n        if (detail.foodid>0) {\r\n            foods=foodinfo.foods.filter((f)=>f.foodid===detail.foodid);\r\n        }\r\n        return foods;\r\n    }\r\n    chooseFood(food){\r\n        this.setState({\r\n            showDrawer:false\r\n        })\r\n        this.state.detail.selectedFood=food;\r\n        if (food.prices && food.prices.length>1){\r\n            Cart.instance.showDialogSubject.next({\r\n                name: \"FoodOptionsDialog\",\r\n                show: true,\r\n                extra: {offerDetail:this.state.detail}\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        let offer=this.state.offer;\r\n        return (\r\n            this.state.show &&\r\n            <React.Fragment>\r\n                    <Dialog fullWidth open={true} onClose={() => this.setState({show:false})}\r\n                            style={{maxWidth: '960px', margin: '0 auto'}}\r\n                            className=\"dlg1 minWidth300\"\r\n                    >\r\n                        <AppBar position=\"sticky\">\r\n                            <Toolbar>\r\n                                <IconButton edge=\"start\" color=\"inherit\"\r\n                                            onClick={() => this.setState({show:false})}\r\n                                            aria-label=\"close\">\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                                <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                                    {offer && offer.title}\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <List style={{marginBottom:10}}>\r\n                            {\r\n                                offer && offer.details.map((offerDetail) => (\r\n                                    <ListItem button selected\r\n                                    key={offerDetail.offerdetailid}\r\n                                              onClick={() => {this.setState({showDrawer: true, detail: offerDetail}); }}\r\n                                              style={{ marginBottom: 5, marginTop: 5}}>\r\n                                        <ListItemText\r\n                                            primary={offerDetail.title}\r\n                                        />\r\n                                        <ListItemSecondaryAction onClick={() => {this.setState({showDrawer: true, detail: offerDetail}); }}>\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <span>{offerDetail.selectedFood? offerDetail.selectedFood.title : \"Choose\"}</span>\r\n                                                <ArrowForwardIosIcon/>\r\n                                            </div>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                        <TextField\r\n                            label=\"Note\"\r\n                            variant=\"outlined\"\r\n                            inputRef={e => this.note = e}\r\n                            style={{marginLeft:20, marginRight:20}}\r\n                            size=\"small\"\r\n                        />\r\n                        <TextField\r\n\r\n                            label=\"Quantity\"\r\n                            type=\"number\"\r\n                            placeholder=\"Quantity\"\r\n                            margin=\"normal\"\r\n                            defaultValue=\"1\"\r\n                            onChange={(e)=>{\r\n                                e.preventDefault();\r\n                                let cnt = Math.max(1, e.target.value);\r\n                                this.state.offer.count=cnt;\r\n                                this.setState({count: cnt})\r\n                            }\r\n                            }\r\n                            inputRef={e => this.count = e}\r\n                            style={{marginLeft:20, marginRight:20, maxWidth:100}}\r\n                        />\r\n\r\n                        <DialogActions style={{ position:\"sticky\", bottom:0,zIndex: 200,\r\n                            marginTop: 0,\r\n                            borderTop: \"1px dotted red\",\r\n                            textAlign:\"center\",\r\n                            backgroundColor:\"white\",\r\n                            height:40}}>\r\n\r\n                                <Box component=\"span\" m={1} style={{ margin: \"0 auto\"}}>\r\n                                    {Util.instance.formatPrice(this.state.offerTotal*this.state.count)}\r\n                                </Box>\r\n                                <Button style={{position: \"absolute\", right: 0}} color={\"secondary\"}\r\n                                        onClick={() => {\r\n                                            let selectedCount=0;\r\n                                            this.state.offer.details.forEach((d)=>{\r\n                                                if (d.selectedFood) selectedCount++;\r\n                                            })\r\n                                            if (selectedCount<this.state.offer.details.length){\r\n                                                Site.instance.showToast(\"Choose all items\", \"error\", \"bottom\")\r\n                                            }else {\r\n                                                this.state.offer.note=this.note.value;\r\n                                                Cart.instance.addOfferToCart(this.state.offer);\r\n                                                this.setState({show: false})\r\n                                            }\r\n                                        }}>ADD <ArrowForwardIosIcon/></Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n        <Drawer anchor=\"bottom\"\r\n                open={this.state.showDrawer}\r\n                onClose={() => this.setState({showDrawer: false})}\r\n                PaperProps={{ style: { maxWidth: 500, margin: \"0 auto\"}}}\r\n        >\r\n            <List >\r\n                {\r\n                    this.state.detail && this.findOptions(this.state.detail).map((food) => (\r\n                        <ListItem button\r\n                                  key={food.foodid}\r\n                                  onClick={() => this.chooseFood(food)}>\r\n                            <ListItemText primary={\r\n                                <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                    <div style={{flexGrow: 1}}>{food.title}</div>\r\n                                    {this.state.detail.selectedFood && this.state.detail.selectedFfoodid === food.foodid &&\r\n                                    <CheckOutlinedIcon color=\"disabled\"/>\r\n                                    }\r\n                                </div>}/>\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        </Drawer>\r\n            </React.Fragment>\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default OfferOptionsDialog;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Drawer,\r\n    ListItemIcon, Divider, Container, BottomNavigation, Grid\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport Util from './service/Util.js'\r\nimport Site from './service/Site.js'\r\nimport Cart from \"./service/Cart\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        flexGrow: 1,\r\n        color: 'white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nclass LeftDrawer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show: false,\r\n            siteChange:'',\r\n            authChange:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Site.instance.siteSubject.subscribe(()=>{\r\n            this.setState({siteChange: ''})\r\n        })\r\n        Site.instance.authSubject.subscribe(()=>{\r\n            this.setState({authChange: ''})\r\n        })\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name===\"LeftDrawer\") {\r\n                this.setState({show: !this.state.show});\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        let site = Site.instance.site;\r\n        let auth = Site.instance.auth;\r\n        return (\r\n            <Drawer anchor={\"left\"} open={this.state.show} onClose={()=>{\r\n                this.setState({show:false})\r\n            }}\r\n                    PaperProps={{\r\n                        style: {minWidth:300, minHeight:'100vh'}\r\n                    }}\r\n            >\r\n                {Site.instance.isLogin() &&\r\n                    <List style={{width: 'auto', height:'100%'}} >\r\n                        <ListItem button key=\"logo\" onClick={() => {\r\n                            Cart.instance.showDialogSubject.next({\r\n                                name: \"ProfileDialog\",\r\n                                show: true\r\n                            })\r\n                        }}>\r\n                            <ListItemText primary={\r\n                            <React.Fragment>\r\n                                <AccountCircleOutlinedIcon style={{fontSize:100, color:'#555555'}}/>\r\n                                <Typography>{Site.instance.auth.firstname} {Site.instance.auth.lastname}</Typography>\r\n                                <Typography>{Site.instance.auth.email}</Typography>\r\n                            </React.Fragment>\r\n                            } style={{alignContent:\"center\", textAlign:\"center\"}}/>\r\n                        </ListItem>\r\n                        <ListItem button key=\"profile\" onClick={() => {\r\n                            this.setState({show:false})\r\n                            Cart.instance.showDialogSubject.next({\r\n                                name: \"ProfileDialog\",\r\n                                show: true\r\n                            })\r\n                        }}>\r\n                            <ListItemIcon><AccountCircleIcon/></ListItemIcon>\r\n                            <ListItemText primary={\"Profile\"}/>\r\n                        </ListItem>\r\n                        <ListItem button key=\"history\" onClick={() => {\r\n                            this.setState({show:false})\r\n                            Cart.instance.showDialogSubject.next({\r\n                                name: \"OrderHistoryDialog\",\r\n                                show: true\r\n                            })\r\n                        }}>\r\n                            <ListItemIcon><HistoryIcon/></ListItemIcon>\r\n                            <ListItemText primary={\"Order History\"}/>\r\n                        </ListItem>\r\n                        <ListItem button key=\"logout\" onClick={() => {\r\n                            this.setState({show:false});\r\n                            Site.instance.logout();\r\n                        }}>\r\n                            <ListItemIcon><ExitToAppIcon/></ListItemIcon>\r\n                            <ListItemText primary={\"Logout\"}/>\r\n                        </ListItem>\r\n                    </List>\r\n                }\r\n                {!Site.instance.isLogin() &&\r\n\r\n                    <List style={{width: 'auto', height:'100%'}}>\r\n                        <ListItem button key=\"logo\" onClick={() => {\r\n                            this.setState({show:false})\r\n                            Cart.instance.showDialogSubject.next({\r\n                                name: \"LoginDialog\",\r\n                                show: true\r\n                            })\r\n                        }}>\r\n                            <ListItemText primary={\r\n                                <React.Fragment>\r\n                                    <AccountCircleOutlinedIcon style={{fontSize:100, color:'#555555'}}/>\r\n                                    <Typography>Not logged in</Typography>\r\n                                </React.Fragment>\r\n                            } style={{alignContent:\"center\", textAlign:\"center\"}}/>\r\n                        </ListItem>\r\n                        <ListItem button key=\"login\" onClick={() => {\r\n                            this.setState({show:false})\r\n                            Cart.instance.showDialogSubject.next({\r\n                                name: \"LoginDialog\",\r\n                                show: true\r\n                            })\r\n                        }}>\r\n                            <ListItemIcon><AccountCircleIcon/></ListItemIcon>\r\n                            <ListItemText primary={\"Login/Register\"}/>\r\n                        </ListItem>\r\n                    </List>\r\n                }\r\n                <BottomNavigation\r\n                    style={{\r\n                        width: '100%',\r\n                        position: 'sticky',\r\n                        bottom: 0,\r\n                        marginTop: 5,\r\n                    }}>\r\n                    <Grid justify=\"center\" container\r\n                          spacing={0}\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                    >\r\n                        <Typography component={\"h5\"} style={{fontSize: \"smaller\", color: '#999999'}}>App Version: 1.0</Typography>\r\n                    </Grid>\r\n                </BottomNavigation>\r\n            </Drawer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeftDrawer;\r\n","import React from 'react';\r\nimport {makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    DialogContent,\r\n    Container, BottomNavigation, Grid, Box, Button, Dialog, Card, CardContent, ListItemSecondaryAction, DialogActions\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport Util from './service/Util.js'\r\nimport Cart from './service/Cart.js'\r\nimport Site from './service/Site'\r\n\r\nclass OrderHistoryDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            show: false,\r\n            orders: [],\r\n            error:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && e.name===\"OrderHistoryDialog\") {\r\n                Site.instance.fetchOrderHistory((result, data)=>{\r\n                    if (result===1){\r\n                        let offerdetails = [];\r\n                        Site.instance.foodinfo.offers.map(offer=>{\r\n                            offerdetails = offerdetails.concat(offer.details);\r\n                        })\r\n                        data.map((order)=>{\r\n                            order.details.map(line=>{\r\n                                if (line.foodid_1*1>0){\r\n                                    let food = Site.instance.foodinfo.foods.find(f=>f.foodid*1===line.foodid_1*1);\r\n                                    line.foodtitle=food?food.title:\"\";\r\n                                }\r\n                                if (line.offerdetailid*1>0){\r\n                                    let offerdetail = offerdetails.find(f=>f.offerdetailid*1===line.offerdetailid*1);\r\n                                    let offerid = offerdetail? offerdetail.offerid*1 : 0;\r\n                                    if (offerid>0){\r\n                                        let offer = Site.instance.foodinfo.offers.find(f=>f.offerid*1===offerid);\r\n                                        line.offertitle=offer?offer.title:\"\";\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                        this.setState({show: e.show, orders: data, error:''});\r\n                    }else{\r\n                        this.setState({orders: [], error:\"Error in displaying previous orders\"});\r\n                    }\r\n\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog fullWidth={false}\r\n                            open={true} onClose={() => this.setState({show:false})}\r\n                    style={{minWidth: 300}}\r\n                    >\r\n\r\n                        <AppBar position={\"static\"}>\r\n                            <Toolbar>\r\n                                <IconButton edge=\"start\" color=\"inherit\"\r\n                                            onClick={() => this.setState({show:false})}\r\n                                            aria-label=\"close\">\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                                <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                                    Order History\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent style={{marginTop:10, padding:0}}>\r\n                            {this.state.orders.length===0 &&\r\n                            <Typography variant=\"h6\" style={{margin: \"40px auto\", textAlign:\"center\", width:250}}>\r\n                                No Order History\r\n                            </Typography>\r\n                            }\r\n                        {this.state.orders.map((order) => (\r\n                            <Card key={order.orderid} style={{margin: 10}}>\r\n                                <CardContent>\r\n                                    <Typography variant=\"h7\" component=\"h5\" style={{textAlign:\"center\"}}>\r\n                                        Order# {order.orderid}   ○ {order.ordertime}\r\n                                    </Typography>\r\n                                    <List dense style={{padding:0}}>\r\n                                    {order.details.map((line) => (\r\n                                        <ListItem key={line.orderdetailid}>\r\n                                            <ListItemText primary={\r\n                                                <span style={{fontSize: \"0.8rem\"}}>{line.quantity*1}x{line.foodid_1*1>0 && line.foodtitle} {line.offerdetailid*1>0 && line.offertitle}</span>\r\n                                            }\r\n                                            />\r\n                                            <ListItemSecondaryAction>\r\n                                                <span style={{fontSize: \"0.8rem\"}}>{Util.instance.formatPrice(line.unitprice)}</span>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        ))}\r\n                                    </List>\r\n                                    <List  dense style={{padding:0}}>\r\n                                            <ListItem key=\"sub\" >\r\n                                                <ListItemText/>\r\n                                                <ListItemSecondaryAction>\r\n                                                    <span style={{fontSize: \"0.8rem\"}}>Subtotal: {Util.instance.formatPrice(order.totalvalue)}</span>\r\n                                                </ListItemSecondaryAction>\r\n                                            </ListItem>\r\n                                        <ListItem key=\"deliveryCharge\">\r\n                                            <ListItemText/>\r\n                                            <ListItemSecondaryAction>\r\n                                                <span style={{fontSize: \"0.8rem\"}}>DeliveryCharge: {Util.instance.formatPrice(order.deliverycharge)}</span>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <ListItem key=\"discount\">\r\n                                            <ListItemText/>\r\n                                            <ListItemSecondaryAction>\r\n                                                <span style={{fontSize: \"0.8rem\"}}>Discount: {Util.instance.formatPrice(order.voucher)}</span>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <ListItem key=\"total\" >\r\n                                            <ListItemText/>\r\n                                            <ListItemSecondaryAction>\r\n                                                <span style={{fontWeight:\"bold\",fontSize: \"0.8rem\"}}>Total: {Util.instance.formatPrice(order.amountdue)}</span>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <ListItem key=\"notes\" >\r\n                                            <ListItemText primary={\r\n                                                <Typography variant=\"body2\" style={{fontSize: \"0.8rem\"}}>\r\n                                                {order.paystatus*1===1 && \"Paid \"}\r\n                                            {order.paystatus*1===2 && \"\"}\r\n                                            {order.paymenttypeid*1===31 && \"Online \"}\r\n                                            {order.paymenttypeid*1===30 && \"Cash \"}\r\n                                            {order.ordertype*1===1 && \"Collection \"}\r\n                                            {order.ordertype*1===2 && \"Delivery \"}\r\n                                                <br />\r\n                                            {Site.instance.getCustomerAddress()}\r\n                                                </Typography>}\r\n                                            />\r\n                                        </ListItem>\r\n                                    </List>\r\n                                </CardContent>\r\n                            </Card>\r\n                        ))}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.setState({show:false})\r\n                            }}>Cancel</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OrderHistoryDialog;","import React from 'react';\r\nimport {createMuiTheme, makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Grid,\r\n    Button, BottomNavigation, Snackbar, Container, Dialog, DialogTitle, DialogContent, DialogActions\r\n} from \"@material-ui/core\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport Site from \"./service/Site\";\r\n\r\n\r\n\r\nclass MessageBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show:false,\r\n            message: \"\",\r\n            title:\"\"\r\n        }\r\n        Site.instance.messageBoxSubject.subscribe((msg)=>{\r\n            if (msg.msg){\r\n                    this.setState({\r\n                        show: true,\r\n                        message: msg.msg,\r\n                        title: msg.title,\r\n                    });\r\n                }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                this.state.show &&\r\n\r\n                <Dialog open={true}>\r\n                    <DialogTitle>\r\n                        {this.state.title}\r\n                    </DialogTitle>\r\n                    <DialogContent style={{ minWidth: 250, minHeight: 150}}>\r\n                        <Typography component={\"body2\"}>\r\n                            <div dangerouslySetInnerHTML={{__html: this.state.message}}/>\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button color=\"primary\" onClick={()=>{\r\n                            this.setState({show: false})\r\n                        }} >OK</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default MessageBox;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    AppBar,\r\n    Badge,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Link,\r\n    DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Dialog\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {ShoppingBasketOutlined, Person, PersonOutline, MotorcycleOutlined} from '@material-ui/icons';\r\nimport AppContext from '../AppContext'\r\nimport Site from './service/Site'\r\nimport Util from \"./service/Util\"\r\nimport Cart from \"./service/Cart\"\r\n\r\n\r\nclass ForgotPassDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Cart.instance.showDialogSubject.subscribe((e)=>{\r\n            if (e.name && e.name===\"ForgotPassDialog\")\r\n                this.setState({show:e.show, mode: ''});\r\n        })\r\n    }\r\n\r\n    sendRecoveryCode(){\r\n        let email = this.emailField.value;\r\n        if (email===\"\" || !Util.instance.validateEmail(email)){\r\n            Site.instance.showToast(\"Please enter valid email address\", \"error\", \"bottom\")\r\n        }else {\r\n            Site.instance.sendPassRecoveryCode({email: email}, (result, msg) => {\r\n                if (result === 1) {\r\n                    this.setState({mode: 'codesent'})\r\n                }\r\n            });\r\n        }\r\n    }\r\n    resetPassword(){\r\n        let email = this.emailField.value;\r\n        let code = this.codeField.value;\r\n        let password = this.password.value;\r\n        let password2 = this.password.value;\r\n\r\n        if (email===\"\" || !Util.instance.validateEmail(email)){\r\n            Site.instance.showToast(\"Please enter valid email address\", \"error\", \"bottom\")\r\n        }else if (password===\"\" || password!==password2) {\r\n            Site.instance.showToast(\"Please enter password and type it again to confirm\", \"error\", \"bottom\")\r\n        }else if (code===\"\") {\r\n            Site.instance.showToast(\"Please enter the recovery code sent to your email address\", \"error\", \"bottom\")\r\n        }else {\r\n            Site.instance.changePassword({email: email, code: code, password: password}, (result, msg) => {\r\n                if (result === 1) {\r\n                    this.setState({mode: '', show:false})\r\n                }\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            this.state.show &&\r\n                    <Dialog open fullWidth onClose={() => this.setState({show:false})}>\r\n                        <DialogTitle>Password Recovery</DialogTitle>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                type=\"email\"\r\n                                fullWidth\r\n                                inputRef={e => this.emailField = e}\r\n                                disabled={this.state.mode==='codesent'}\r\n                            />\r\n                            {this.state.mode === 'codesent' &&\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                label=\"Recovery Code\"\r\n                                type=\"number\"\r\n                                fullWidth\r\n                                inputRef={e => this.codeField = e}\r\n                            />\r\n                            }\r\n                            {this.state.mode === 'codesent' &&\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                label=\"New Password\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                inputRef={e => this.password = e}\r\n                            />\r\n                            }\r\n                            {this.state.mode === 'codesent' &&\r\n                                <TextField\r\n                                margin=\"dense\"\r\n                                label=\"New Password again\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                inputRef={e => this.password2 = e}\r\n                                />\r\n                            }\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button color=\"secondary\" onClick={() => {\r\n                                this.setState({show:false})\r\n                            }}>Cancel</Button>\r\n                            {this.state.mode === '' && <Button color=\"primary\" onClick={() => {\r\n                                this.sendRecoveryCode()\r\n                            }}>Send Recovery Code</Button>\r\n                            }\r\n                            {this.state.mode === 'codesent' &&\r\n                            <Button color=\"primary\" onClick={() => {\r\n                                this.resetPassword()\r\n                            }}>Update Password</Button>\r\n                            }\r\n                        </DialogActions>\r\n                    </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ForgotPassDialog;","import React from 'react';\r\nimport {\r\n    Backdrop, CircularProgress\r\n} from \"@material-ui/core\";\r\nimport Site from \"./service/Site\";\r\n\r\n\r\nclass WaitingProgress extends React.Component {\r\n    timer;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            show:false,\r\n            message: \"\",\r\n        }\r\n        Site.instance.waitingSubject.subscribe((data)=>{\r\n            this.setState({\r\n                show: data.show,\r\n                message: data.msg?? \"\"\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                this.state.show &&\r\n                <Backdrop open style={{zIndex: 9999, backgroundColor:\"rgb(0 0 0 / 70%)\"}} >\r\n                    <span style={{ alignItems: \"center\", display: \"flex\",  fontSize: \"larger\", flexDirection:\"column\"}}>\r\n                    <CircularProgress color=\"secondary\" />\r\n                    <span style={{marginTop: 10, color: \"#e6e6e6\"}}>{this.state.message}</span>\r\n                    </span>\r\n                </Backdrop>\r\n    );\r\n    }\r\n}\r\n\r\nexport default WaitingProgress;","import React from 'react';\r\nimport {BrowserRouter, Router, Link} from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport {createMuiTheme, makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\r\nimport AppContext from './AppContext'\r\nimport {\r\n    AppBar, Hidden, BottomNavigation, Box, Button, Paper,\r\n    Container, Dialog, MenuList, MenuItem, FormLabel,\r\n    DialogActions, DialogContent,DialogTitle,\r\n    Grid, List, ListItem, Typography, Drawer, ListItemIcon, ListItemText, Divider\r\n} from '@material-ui/core';\r\nimport Cart from './components/service/Cart.js'\r\nimport Site from './components/service/Site.js'\r\nimport Toast from './components/Toast'\r\nimport './App.css';\r\nimport BottomBar from \"./components/BottomBar\";\r\nimport CartDialog from \"./components/CartDialog\";\r\nimport DeliveryDialog from \"./components/DeliveryDialog\";\r\nimport RegisterCustomer from \"./components/RegisterCustomer\";\r\nimport LoginDialog from \"./components/LoginDialog\";\r\nimport ProfileDialog from \"./components/ProfileDialog\";\r\nimport MyAppBar from \"./components/MyAppBar\";\r\nimport PaymentDialog from \"./components/PaymentDialog\";\r\nimport FoodOptionsDialog from \"./components/FoodOptionsDialog\";\r\nimport OfferOptionsDialog from \"./components/OfferOptionsDialog\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport Util from \"./components/service/Util\";\r\nimport LeftDrawer from \"./components/LeftDrawer\";\r\nimport OrderHistoryDialog from \"./components/OrderHistoryDialog\";\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport ForgotPassDialog from \"./components/ForgotPassDialog\";\r\nimport MessageBox from \"./components/MessageBox\";\r\nimport WaitingProgress from \"./components/WaitingProgress\";\r\n\r\nconst themeLight = createMuiTheme({\r\n    type: 'light',\r\n    palette: {\r\n        error: {\r\n            main: \"#ff604f\"\r\n        }\r\n    },\r\n    typography: {\r\n        fontFamily: [\r\n            'IRANSansMobileFaNum',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif'\r\n        ].join(','),\r\n    }\r\n});\r\nconst themeDark = createMuiTheme({\r\n    type: 'dark',\r\n\r\n});\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        flexGrow: 1,\r\n        color: 'white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nclass App extends React.Component {\r\n    user = {}\r\n    classes = {};\r\n    constructor(props) {\r\n        super(props);\r\n        AppContext.app = this;\r\n        this.state = {\r\n            fatalError: undefined,\r\n        };\r\n        this.classes = useStyles;\r\n    }\r\n\r\n    reload(){\r\n        window.location.reload();\r\n    }\r\n    componentDidMount() {\r\n        Site.instance.init();\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n    }\r\n\r\n    render() {\r\n        let site = Site.instance.site;\r\n        return (\r\n                <BrowserRouter>\r\n                    <MuiThemeProvider theme={site && site.appTheme === 'dark' ? themeDark : themeLight}>\r\n                        <div id=\"mainContainer\" style={{position:\"fixed\",top:0, left:0, width:\"100%\", height:'100vh',backgroundSize: \"cover\",\r\n                            backgroundPosition: \"center\",\r\n                            backgroundColor:\"#555555\",\r\n                            zIndex: -9999\r\n                        }}></div>\r\n                        <Container  style={{padding: \"0\",\r\n                            minHeight: \"100%\",\r\n                            height: \"auto !important\",\r\n                            margin: \"0 auto -142px\",\r\n                            maxWidth: '1224px'\r\n                        }} >\r\n                                {\r\n                                    this.state.fatalError &&\r\n                                    <Dialog open={true}>\r\n                                        <DialogTitle>\r\n                                            Error\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                                <Typography component={\"h5\"} style={{  textAlign: \"center\"}}>\r\n                                                    {this.state.fatalError}\r\n                                                </Typography>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                            <Button color=\"primary\" onClick={()=>{\r\n                                                this.setState({fatalError: null})\r\n                                            }} >Cancel</Button>\r\n                                            <Button color=\"primary\" onClick={()=>{\r\n                                                this.reload();\r\n                                            }} >Reload</Button>\r\n\r\n                                        </DialogActions>\r\n                                    </Dialog>\r\n\r\n                                }\r\n                            { false &&    <MyAppBar/> }\r\n                                <RegisterCustomer />\r\n\r\n                                <MessageBox/>\r\n                                <WaitingProgress/>\r\n                                <Toast/>\r\n                            <div style={{height:142}}></div>\r\n                        </Container>\r\n                        <div style={{height1:142, minHeight:142, width:'100%', backgroundColor:\"rgb(77 77 77 / 51%)\", zIndex: 9999}} className=\"footer\">\r\n                            <Grid item xs={12} style={{maxWidth: '1224px',margin: \"0 auto\", padding: 15, textAlign: \"center\"}}>\r\n                                <Typography style={{fontWeight:\"bold\", color:\"white\"}} >\r\n                                    FinalVPN\r\n                                </Typography>\r\n                                <FacebookIcon size=\"2x\"/>\r\n                                <a href={\"https://t.me/FinalVPN\"} target={\"_blank\"}><TwitterIcon size=\"2x\"/></a>\r\n                                <a href={\"https://www.youtube.com/@finalvpn\"} target={\"_blank\"}><YouTubeIcon size=\"2x\"/></a>\r\n                                <a href={\"https://t.me/FinalVPN_App\"} target={\"_blank\"}><TelegramIcon size=\"2x\"/></a>\r\n                                <div style={{color: \"dimgray\", fontSize:\"12px\"}}><a href=\"https://finalvpn.github.io\" target=\"_blank\">Download App</a></div>\r\n                            </Grid>\r\n                        </div>\r\n                        <Hidden mdUp>\r\n                        <BottomBar />\r\n                        </Hidden>\r\n                    </MuiThemeProvider>\r\n                </BrowserRouter>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}